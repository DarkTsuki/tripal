<?php

require_once "api/tripal_fields.api.inc";
require_once "includes/tripal_fields.field_storage.inc";

/**
 * Implements hook_field_info().
 */
function tripal_fields_field_info() {
  $fields = array(
    'organism_id' => array(
      'label' => t('Organism'),
      'description' => t('A field for specifying an organism.'),
      'default_widget' => 'tripal_fields_organism_select_widget',
      'default_formatter' => 'tripal_fields_organism_formatter',
      'settings' => array(),
      'storage' => array(
        'type' => 'field_chado_storage',
        'module' => 'tripal_fields',
        'active' => TRUE
      ),
    ),
    'dbxref_id' => array(
      'label' => t('Cross-reference'),
      'description' => t('This record can be cross-referenced with a record in
          another online database. This field is intended for the most prominent
          reference.  At a minimum, the database and accession must be provided.'),
      'default_widget' => 'tripal_fields_dbxref_id_widget',
      'default_formatter' => 'tripal_fields_dbxref_id_formatter',
      'settings' => array(),
      'storage' => array(
        'type' => 'field_chado_storage',
        'module' => 'tripal_fields',
        'active' => TRUE
      ),
    ),
    'residues' => array(
      'label' => t('Residues'),
      'description' => t('A field for managing nucleotide and protein residues.'),
      'default_widget' => 'tripal_fields_residue_textarea_widget',
      'default_formatter' => 'tripal_fields_residues_formatter',
      'settings' => array(),
      'storage' => array(
        'type' => 'field_chado_storage',
        'module' => 'tripal_fields',
        'active' => TRUE
      ),
    ),
    'md5checksum' => array(
      'label' => t('MD5 checksum'),
      'description' => t('A field for generating MD5 checksum for a sequence.'),
      'default_widget' => 'tripal_fields_md5checksum_checkbox_widget',
      'default_formatter' => 'tripal_fields_md5checksum_formatter',
      'settings' => array(),
      'storage' => array(
        'type' => 'field_chado_storage',
        'module' => 'tripal_fields',
        'active' => TRUE
      ),
    ),
    'seqlen' => array(
      'label' => t('Sequence length'),
      'description' => t('A field for calculating the length of a sequence.'),
      'default_widget' => 'tripal_fields_seqlen_hidden_widget',
      'default_formatter' => 'tripal_fields_seqlen_formatter',
      'settings' => array(),
      'storage' => array(
        'type' => 'field_chado_storage',
        'module' => 'tripal_fields',
        'active' => TRUE
      ),
    ),
    // The field provides a widget for adding new properties
    // to an entity that is connected to a base table that has a prop table
    // in Chado.
    'kvproperty_adder' => array(
      'label' => t('Add a Property Type'),
      'description' => t('This record may have any number of properties. Use
          this field to first add the type.'),
      'default_widget' => 'tripal_fields_kvproperty_adder_widget',
      'default_formatter' => 'tripal_fields_kvproperty_adder_formatter',
      'settings' => array(),
      'storage' => array(
        'type' => 'field_chado_storage',
        'module' => 'tripal_fields',
        'active' => TRUE
      ),
    ),
    // The field provides form elements for adding a property to an entity
    // that in turn gets stored in a prop table of Chado (e.g. featureprop,
    // stockprop, etc).
    'kvproperty' => array(
      'label' => t('Add a Property'),
      'description' => t('Add details about this property.'),
      'default_widget' => 'tripal_fields_kvproperty_widget',
      'default_formatter' => 'tripal_fields_kvproperty_formatter',
      'settings' => array(),
      'storage' => array(
        'type' => 'field_chado_storage',
        'module' => 'tripal_fields',
        'active' => TRUE
      ),
    ),
  );
  return $fields;
}

/**
 * Implements hook_field_widget_info().
 */
function tripal_fields_field_widget_info() {
  return array(
    'tripal_fields_organism_select_widget' => array(
      'label' => t('Organism Select'),
      'field types' => array('organism_id')
    ),
    'tripal_fields_dbxref_id_widget' => array(
      'label' => t('Cross-reference'),
      'field types' => array('dbxref_id'),
      'description' => t('This record can be cross-referenced with a record in another online database. This field is intended for the most prominent reference.  At a minimum, the database and accession must be provided.'),
    ),
    'tripal_fields_md5checksum_checkbox_widget' => array(
      'label' => t('MD5 Checksum Checkbox'),
      'field types' => array('md5checksum'),
    ),
    'tripal_fields_residues_textarea_widget' => array(
      'label' => t('Residues'),
      'field types' => array('residues'),
    ),
    'tripal_fields_seqlen_hidden_widget' => array(
      'label' => t('Sequence Length'),
      'field types' => array('seqlen'),
    ),
    'tripal_fields_kvproperty_adder_widget' => array(
      'label' => t('Add a Property'),
      'field types' => array('kvproperty_adder'),
    ),
    'tripal_fields_kvproperty_widget' => array(
      'label' => t('Property'),
      'field types' => array('kvproperty'),
    ),
  );
}
/**
 * Implements hook_field_formatter_info().
 */
function tripal_fields_field_formatter_info() {
  return array(
    'tripal_fields_organism_formatter' => array(
      'label' => t('Organism'),
      'field types' => array('organism_id')
    ),
    'tripal_fields_dbxref_id_formatter' => array(
      'label' => t('Cross-reference'),
      'field types' => array('dbxref_id')
    ),
    'tripal_fields_md5checksum_formatter' => array(
      'label' => t('MD5 checksum'),
      'field types' => array('md5checksum')
    ),
    'tripal_fields_residues_formatter' => array(
      'label' => t('Residues'),
      'field types' => array('residues')
    ),
    'tripal_fields_seqlen_formatter' => array(
      'label' => t('Sequence length'),
      'field types' => array('seqlen')
    ),
    'tripal_fields_kvproperty_adder_formatter' => array(
      'label' => t('Add a Property'),
      'field types' => array('kvproperty_adder')
    ),
    'tripal_fields_kvproperty_formatter' => array(
      'label' => t('Property'),
      'field types' => array('kvproperty')
    ),
  );
}

/**
 * Implements hook_chado_field_alter().
 *
 * This function is used to change the default field formatter and widget
 * that are assigned to fields of an Entity. This hook is only used for
 * those fields that correspond to a column in a Chado table.  An implementation
 * of this hook can be used to change the default formatters and widgets to
 * custom formatters and widgets that are created by the module creating
 * this hook.
 *
 * By default, Tripal will provide custom formatters and widgets for many
 * columns in Chado tables, therefore, this hook will most likely be of use
 * to extension modules that create custom table inside of Chado.
 *
 * @param $field
 */
function hook_chado_field_alter(&$field) {
  // TODO: add example code for how to use this hook.
}

/**
 * Implements hook_chado_field_alter().
 *
 * This function adds the custom formatters and widgets to many of the Chado
 * tables.  This way Tripal users get a nice set of already usable fields.
 */
function tripal_fields_chado_field_alter(&$field) {

  if (!array_key_exists('field_settings', $field)) {
    return;
  }
  // If the field doesn't list the Chado table or column then just return.
  if (!array_key_exists('chado_table', $field['field_settings']) or
      !array_key_exists('chado_column', $field['field_settings'])) {
    return;
  }
  // Here we provide new field types and widgets for FK fields
  // and fields that need special attention.
  if ($field['field_settings']['chado_column'] =='organism_id') {
    $field['field_type'] = 'organism_id';
    $field['widget_type'] = 'tripal_fields_organism_select_widget';
    $field['label'] = 'Organism';
    $field['description'] = 'Select an organism.';
  }
  else if ($field['field_settings']['chado_column'] =='dbxref_id') {
    $field['field_type'] = 'dbxref_id';
    $field['widget_type'] = 'tripal_fields_primary_dbxref_widget';
    $field['label'] = 'Primary Cross Reference';;
    $field['description'] = 'This record can be cross-referenced with a
    record in another online database. The primary reference is for the
    most prominent reference.  At a minimum, the database and accession
    must be provided.  To remove a set reference, change the database
    field to "Select a Database".';
  }
  else if ($field['field_settings']['chado_table'] == 'feature' and
    $field['field_settings']['chado_column'] == 'md5checksum') {
    $field['field_type'] = 'md5checksum';
    $field['widget_type'] = 'tripal_fields_md5checksum_checkbox_widget';
    $field['label'] = 'MD5 Checksum';
    $field['description'] = 'Generating MD5 checksum for the sequence.';
  }
  else if ($field['field_settings']['chado_table'] == 'feature' and $field['field_settings']['chado_column'] == 'seqlen') {
    $field['field_type'] = 'seqlen';
    $field['widget_type'] = 'tripal_fields_seqlen_hidden_widget';
    $field['label'] = 'Seqlen';
    $field['description'] = 'The length of the residues.';
  }
  else if ($field['field_settings']['chado_table'] == 'feature' and $field['field_settings']['chado_column'] == 'residues') {
    $field['field_type'] = 'residues';
    $field['widget_type'] = 'tripal_fields_residues_textarea_widget';
    $field['label'] = 'Residues';
    $field['description'] = 'Please provide an IUPAC compatible residues for this feature. Spaces and new lines are allowed.';
  }
  else if ($field['label'] == 'Timeaccessioned') {
    $field['label'] = 'Time Accessioned';
    $field['description'] = 'Please enter the time that this record was first added to the database.';
  }
  else if ($field['label'] == 'Timelastmodified') {
    $field['label'] = 'Time Last Modified';
    $field['description'] = 'Please enter the time that this record was last modified. The default is the current time.';
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function tripal_fields_field_widget_form_alter(&$element, &$form_state, $context) {

  if (array_key_exists('#field_name', $element)) {
    $field_name = $element['#field_name'];
    $matches = array();

    if (preg_match('/(.+?)__(.+?)$/', $field_name, $matches)) {
      $tablename = $matches[1];
      $colname = $matches[2];
      $schema = chado_get_schema($tablename);

      // The timelastmodified field exists in many Chado tables.  We want
      // the form element to update to the most recent time rather than the time
      // in the database.
      if ($colname == 'timelastmodified' and $schema['fields'][$colname]['type'] == 'datetime') {
        // We want the default value for the field to be the current time.
        $element['#default_value']['value'] = format_date(time(), 'custom', "Y-m-d H:i:s", 'UTC');
        $element['#date_items']['value'] = $element['#default_value']['value'];
      }
      // We want the date combo fieldset to be collaspible so we will
      // add our own theme_wrapper to replace the one added by the date
      // module.
      if (array_key_exists($colname, $schema['fields']) and $schema['fields'][$colname]['type'] == 'datetime') {
        $element['#theme_wrappers'] = array('tripal_entities_date_combo');
      }
    }
  }
}

/**
 * Implements hook_field_formatter_view().
 */
function tripal_fields_field_formatter_view($entity_type, $entity, $field,
    $instance, $langcode, $items, $display) {

      $element = array();
      switch ($display['type']) {
        case 'tripal_fields_organism_formatter':
          module_load_include('inc', 'tripal_fields', 'includes/fields/organism_id');
          tripal_fields_organism_select_formatter($element, $entity_type, $entity, $field,
              $instance, $langcode, $items, $display);
          break;
        case 'tripal_fields_dbxref_id_formatter':
          module_load_include('inc', 'tripal_fields', 'includes/fields/dbxref_id');
          tripal_fields_dbxref_id_formatter($element, $entity_type, $entity, $field,
              $instance, $langcode, $items, $display);
          break;
        case 'tripal_fields_md5checksum_formatter':
          module_load_include('inc', 'tripal_fields', 'includes/fields/md5checksum');
          tripal_fields_md5checksum_checkbox_formatter($element, $entity_type, $entity, $field,
              $instance, $langcode, $items, $display);
          break;
        case 'tripal_fields_residues_formatter':
          module_load_include('inc', 'tripal_fields', 'includes/fields/residues');
          tripal_fields_residues_textarea_formatter($element, $entity_type, $entity, $field,
              $instance, $langcode, $items, $display);
          break;
        case 'tripal_fields_seqlen_formatter':
          module_load_include('inc', 'tripal_fields', 'includes/fields/seqlen');
          tripal_fields_seqlen_hidden_formatter($element, $entity_type, $entity, $field,
              $instance, $langcode, $items, $display);
          break;
        case 'tripal_fields_kvproperty_adder_formatter':
          module_load_include('inc', 'tripal_fields', 'includes/fields/kvproperty_adder');
          tripal_fields_kvproperty_adder_formatter($element, $entity_type, $entity, $field,
              $instance, $langcode, $items, $display);
          break;
        case 'tripal_fields_kvproperty_formatter':
          module_load_include('inc', 'tripal_fields', 'includes/fields/kvproperty');
          tripal_fields_kvproperty_formatter($element, $entity_type, $entity, $field,
              $instance, $langcode, $items, $display);
          break;
      }
      return $element;
}

/**
 * Implements hook_field_widget_form().
 */
function tripal_fields_field_widget_form(&$form, &$form_state, $field,
    $instance, $langcode, $items, $delta, $element) {

  $widget = $element;
  switch ($instance['widget']['type']) {
    case 'tripal_fields_organism_select_widget':
      // Make sure the include files get parsed now and for the form submits.
      form_load_include($form_state, 'inc', 'tripal_fields', 'includes/fields/organism_id');
      module_load_include('inc', 'tripal_fields', 'includes/fields/organism_id');
      // Update the widget with the new field.
      tripal_fields_organism_select_widget($widget, $form, $form_state, $field, $instance, $langcode, $items, $delta, $element);
      break;
    case 'tripal_fields_dbxref_id_widget':
      form_load_include($form_state, 'inc', 'tripal_fields', 'includes/fields/dbxref_id');
      module_load_include('inc', 'tripal_fields', 'includes/fields/dbxref_id');
      tripal_fields_dbxref_id_widget($widget, $form, $form_state, $field, $instance, $langcode, $items, $delta, $element);
      break;
    case 'tripal_fields_md5checksum_checkbox_widget':
      form_load_include($form_state, 'inc', 'tripal_fields', 'includes/fields/md5checksum');
      module_load_include('inc', 'tripal_fields', 'includes/fields/md5checksum');
      tripal_fields_md5checksum_checkbox_widget($widget, $form, $form_state, $field, $instance, $langcode, $items, $delta, $element);
      break;
    case 'tripal_fields_residues_textarea_widget':
      form_load_include($form_state, 'inc', 'tripal_fields', 'includes/fields/residues');
      module_load_include('inc', 'tripal_fields', 'includes/fields/residues');
      tripal_fields_residues_textarea_widget($widget, $form, $form_state, $field, $instance, $langcode, $items, $delta, $element);
      break;
    case 'tripal_fields_seqlen_hidden_widget':
      form_load_include($form_state, 'inc', 'tripal_fields', 'includes/fields/seqlen');
      module_load_include('inc', 'tripal_fields', 'includes/fields/seqlen');
      tripal_fields_seqlen_hidden_widget($widget, $form, $form_state, $field, $instance, $langcode, $items, $delta, $element);
      break;
    case 'tripal_fields_kvproperty_adder_widget':
      form_load_include($form_state, 'inc', 'tripal_fields', 'includes/fields/kvproperty_adder');
      module_load_include('inc', 'tripal_fields', 'includes/fields/kvproperty_adder');
      tripal_fields_kvproperty_adder_widget($widget, $form, $form_state, $field, $instance, $langcode, $items, $delta, $element);
      break;
    case 'tripal_fields_kvproperty_widget':
      form_load_include($form_state, 'inc', 'tripal_fields', 'includes/fields/kvproperty');
      module_load_include('inc', 'tripal_fields', 'includes/fields/kvproperty');
      tripal_fields_kvproperty_widget($widget, $form, $form_state, $field, $instance, $langcode, $items, $delta, $element);
      break;
  }
  return $widget;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * The field_ui_display_overview_form is used for formatting the display
 * or layout of fields attached to an entity and shown on the entity view page.
 */
function tripal_fields_form_field_ui_display_overview_form_alter(&$form, &$form_state, $form_id) {
  // Remove the kvproperty_addr field as it isn't ever displayed. It's just used
  // on the add/edit form of an entity for adding new property fields.
  $fields_names = element_children($form['fields']);
  foreach ($fields_names as $field_name) {
    $field_info = field_info_field($field_name);
    if ($field_info['type'] == 'kvproperty_adder') {
      unset($form['fields'][$field_name]);
    }
  }
}
/**
 * Implements hook_form_FORM_ID_alter().
 *
 * The field_ui_field_overview_form is used for ordering and configuring the
 * fields attached to an entity.
 */
function tripal_fields_form_field_ui_field_overview_form_alter(&$form, &$form_state, $form_id) {
  // Remove the kvproperty_addr field as it isn't ever displayed. It's just used
  // on the add/edit form of an entity for adding new property fields.
  $fields_names = element_children($form['fields']);
  foreach ($fields_names as $field_name) {
    $field_info = field_info_field($field_name);
    if ($field_info['type'] == 'kvproperty_adder') {
      unset($form['fields'][$field_name]);
    }
  }
}
/**
 * Implements hook_field_is_empty().
 */
function tripal_fields_field_is_empty($item, $field) {

  // If there is no value field then the field is empty.
  if (!array_key_exists('value', $item)) {
    return TRUE;
  }

  // Iterate through all of the fields and if at least one has a value
  // the field is not empty.
  foreach ($item as $form_field_name => $value) {
    if (isset($value) and $value != NULL and $value != '') {
      return FALSE;
    }
  }

  // Otherwise, the field is empty.
  return TRUE;
}

/**
 * Returns the values of the field from the $form_state.
 */
function tripal_fields_get_field_form_values($field_name, $form_state, $delta = 0, $child = NULL) {
  $value = NULL;
  // The form_state must have the 'values' key. If not then just return.
  if (!array_key_exists('values', $form_state)) {
    return $value;
  }

  // If the field name is not in the form_state['values'] then return.
  if (!array_key_exists($field_name, $form_state['values'])) {
    return $value;
  }

  // Iterate through the values looking for the field_name provided.
  foreach ($form_state['values'][$field_name] as $langcode => $items) {
    $item = $items[$delta];
    if ($child){
      if(array_key_exists($child, $item) and $item[$child] != '') {
        $value = $item[$child];
      }
    }
    else {
      $value = $item['value'];
    }
  }
  return $value;
}

/**
 * Sets the values of the field from the $form_state.
 */
function tripal_fields_set_field_form_values($field_name, &$form_state, $newvalue, $delta = 0, $child = NULL) {
  // The form_state must have the 'values' key. If not then just return.
  if (!array_key_exists('values', $form_state)) {
    return FALSE;
  }

  // If the field name is not in the form_state['values'] then reutrn.
  if (!array_key_exists($field_name, $form_state['values'])) {
    return FALSE;
  }

  foreach ($form_state['values'][$field_name] as $langcode => $items) {
    if ($child) {
      $form_state['values'][$field_name][$langcode][$delta][$child] = $newvalue;
    }
    else {
      $form_state['values'][$field_name][$langcode][$delta]['value'] = $newvalue;
    }
  }
  return TRUE;
}


/**
 * Implements hook_theme().
 */
function tripal_fields_theme($existing, $type, $theme, $path) {
  return array(
    'tripal_fields_dbxref_id_widget' => array(
      'render element' => 'element',
      'file' => 'includes/fields/dbxref_id.inc',
    ),
    'tripal_fields_kvproperty_addr_widget' => array(
      'render element' => 'element',
      'file' => 'includes/fields/dbxref_id.inc',
    ),
  );
}

