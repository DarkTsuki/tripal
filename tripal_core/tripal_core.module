<?php

require_once "jobs.php";
require_once "mviews.php";
require_once "chado_install.php";
require_once "tripal_core.api.inc";

/**
 * @defgroup tripal_modules Tripal Modules
 * @{
 * All documented functions for the various Tripal Modules
 * @}
 *
 * @defgroup tripal_core Core Tripal Module
 * @ingroup tripal_modules
 */

/**
 * Implements hook_init().
 * Used to set the search_path, create default content and set default variables.
 *
 * @ingroup tripal_core
 */
function tripal_core_init() {

  // the two lines below are necessary to ensure that the search_path
  // variable is always set.  In the case where a view needs to query the
  // chado schema when it is local to the Drupal database.  Otherwise the
  // search_path isn't set.  When tripal_db_set_active is called it
  // automatically sets the serach path if chado is local to the
  // Drupal database
  $previous = tripal_db_set_active('chado');
  tripal_db_set_active($previous);

  // create the 'tripal' controlled volcabulary in chado but only if it doesn't already exist, and
  // only if the chado database is present.
  if (tripal_core_is_chado_installed()) {
    $previous_db = tripal_db_set_active('chado');  // use chado database
    if (!db_fetch_object(db_query("SELECT * FROM {cv} WHERE name = 'tripal'"))) {
      $results = db_query("INSERT INTO {cv} (name,definition) ".
                         "VALUES ('tripal', 'Terms used by Tripal for modules to manage data such as that stored in property tables like featureprop, analysisprop, etc')");
    }
    if (!db_fetch_object(db_query("SELECT * FROM {db} WHERE name = 'tripal'"))) {
      $results = db_query("INSERT INTO {db} (name,description) ".
                        "VALUES ('tripal', 'Used as a database placeholder for tripal defined objects such as tripal cvterms')");
    }
    tripal_db_set_active($previous_db);  // now use drupal database
  }

  // add some variables for all javasript to use for building URLs
  global $base_url;
  $theme_dir = drupal_get_path('theme', 'tripal');
  $clean_urls  = variable_get('clean_url', 0);
  drupal_add_js(
    "var baseurl = '$base_url';
      var themedir = '$theme_dir';
      var isClean = $clean_urls;",
    'inline');

  // make sure the date time settings are the way Tripal will insert them
  // otherwise PostgreSQL version that may have a different datestyle setting
  // will fail when inserting or updating a date column in a table.
  db_query("SET DATESTYLE TO '%s'", 'MDY');
}

/**
 * Implements hook_menu().
 * Defines all menu items needed by Tripal Core
 *
 * @ingroup tripal_core
 */
function tripal_core_menu() {
  $items = array();

  // Triapl setting groups
  $items['admin/tripal'] = array(
    'title' => 'Tripal Management',
    'description' => "Manage the behavior or Tripal and its various modules.",
    'position' => 'right',
    'weight' => -5,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer site configuration'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['tripal_toggle_box_menu/%/%/%'] = array(
    'title' => 'Toggle Box',
    'page callback' => 'tripal_toggle_box_menu',
    'page arguments' => array(1, 2, 3),
    'access arguments' => array('access administration pages'),
    'type' => MENU_CALLBACK | MENU_LINKS_TO_PARENT
  );
  $items['admin/tripal/chado_install'] = array(
    'title' => 'Install Chado Schema',
    'description' => 'Installs the Chado database tables, views, etc., inside the current Drupal database',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tripal_core_chado_load_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  // Jobs Management
  $items['admin/tripal/tripal_jobs'] = array(
    'title' => 'Jobs',
    'description' => 'Jobs managed by Tripal',
    'page callback' => 'tripal_jobs_report',
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/tripal/tripal_jobs/cancel/%'] = array(
    'title' => 'Jobs',
    'description' => 'Cancel a pending job',
    'page callback' => 'tripal_jobs_cancel',
    'page arguments' => array(4),
    'access arguments' => array('access administration pages'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/tripal/tripal_jobs/rerun/%'] = array(
    'title' => 'Jobs',
    'description' => 'Re-run an existing job.',
    'page callback' => 'tripal_jobs_rerun',
    'page arguments' => array(4),
    'access arguments' => array('access administration pages'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/tripal/tripal_jobs/view/%'] = array(
    'title' => 'Jobs Details',
    'description' => 'View job details.',
    'page callback' => 'tripal_jobs_view',
    'page arguments' => array(4),
    'access arguments' => array('access administration pages'),
    'type' => MENU_CALLBACK,
  );

  // Materialized Views
  $items['admin/tripal/mviews'] = array(
    'title' => 'MViews',
    'description' => 'Materialized views are used to improve speed of large or complex queries.',
    'page callback' => 'tripal_mviews_report',
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/tripal/mviews/report/%'] = array(
    'title' => 'Materialized View',
    'description' => 'Materialized views are used to improve speed of large or complex queries.',
    'page callback' => 'tripal_mview_report',
    'page arguments' => array(4),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/tripal/mviews/new'] = array(
    'title' => 'Create MView',
    'description' => 'Materialized views are used to improve speed of large or complex queries.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tripal_mviews_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/tripal/mviews/edit/%'] = array(
    'title' => 'Edit MView',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tripal_mviews_form', 4),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/tripal/mviews/action/%/%'] = array(
    'title' => 'Create MView',
    'description' => 'Materialized views are used to improve speed of large or complex queries.',
    'page callback' => 'tripal_mviews_action',
    'page arguments' => array(4, 5, "1"),
    'access arguments' => array('access administration pages'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 *  Set the permission types that the chado module uses.  Essentially we
 *  want permissionis that protect creation, editing and deleting of chado
 *  data objects
 *
 * @ingroup tripal_core
 */
function tripal_core_perm() {
  return array();
}

/**
 * Check whether chado is installed (either in the same or a different database)
 *
 * @return
 *   TRUE/FALSE depending upon whether chado is installed.
 *
 * @ingroup tripal_chado_api
 */
function tripal_core_is_chado_installed() {
  global $db_url, $db_type;

  // first check if chado is in the db_url of the
  // settings.php file
  if (is_array($db_url)) {
    if (isset($db_url['chado'])) {
      return TRUE;
    }
  }

  // check to make sure the chado schema exists
  return tripal_core_chado_schema_exists();
}


/**
 * Implements hook_theme().
 * Registers template files/functions used by this module.
 *
 * @ingroup tripal_core
 */
function tripal_core_theme() {
  return array(
    'tripal_core_job_view' => array(
       'arguments' => array('job_id' => NULL),
       'template' => 'tripal_core_job_view',
    ),
  );
}

/**
 * Implements hook_job_describe_args().
 * Describes the arguements for the tripal_update_mview job to allow for greater
 * readability in the jobs details pages.
 *
 * @param $callback
 *   The callback of the current tripal job (this is the function that will be executed
 *   when tripal_launch_jobs.php is run.
 * @param $args
 *   An array of arguments passed in when the job was registered.
 *
 * @return
 *   A more readable $args array
 *
 * @ingroup tripal_core
 */
function tripal_core_job_describe_args($callback, $args) {
  $new_args = array();
  if ($callback == 'tripal_update_mview') {
    // get this mview details
    $sql = "SELECT * FROM {tripal_mviews} WHERE mview_id = %d ";
    $mview = db_fetch_object(db_query($sql, $args[0]));
    $new_args['View Name'] = $mview->name;
  }

  return $new_args;
}

/**
 * this is just a wrapper for backwards compatibility with a naming mistake.
 * it can go away in the future as it only is useful for jobs created by v0.3b
 *
 * @todo remove this function
 */
function tripal_core_load_gff3($gff_file, $organism_id, $analysis_id, $add_only = 0,
  $update = 0, $refresh = 0, $remove = 0, $job = NULL) {

  tripal_feature_load_gff3($gff_file, $organism_id, $analysis_id, $add_only,
    $update, $refresh, $remove, $job);
}

/**
 * Implements hook_coder_ignore().
 * Defines the path to the file (tripal_core.coder_ignores.txt) where ignore rules for coder are stored
 */
function tripal_core_coder_ignore() {
  return array(
    'path' => drupal_get_path('module', 'tripal_core'),
    'line prefix' => drupal_get_path('module', 'tripal_core'),
  );
}
