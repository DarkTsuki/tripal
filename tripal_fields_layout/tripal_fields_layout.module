<?php

/**
 *
 * Implements hook_form_FORM_ID_alter().
 *
 * The field_ui_field_edit_form is used for customizing the settings of
 * a field attached to an entity.
 */
function tripal_fields_layout_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id) {
  // For entity fields added by Tripal Entities we don't want the
  // the end-user to change the cardinality and the required fields
  // such that record can't be saved in Chado.
  $dbs = tripal_fields_layout_get_db_names_for_published_vocabularies();
  if (in_array($form['#instance']['entity_type'], $dbs)) {
    $form['field']['cardinality']['#access'] = FALSE;
    $form['instance']['required']['#access'] = FALSE;
  }

  // TODO: don't the the maximum length be larger than the field size.
}
/**
 * Implements hook_form_FORM_ID_alter().
 *
 * The field_ui_display_overview_form is used for formatting the display
 * or layout of fields attached to an entity.
 */
function tripal_fields_layout_form_field_ui_display_overview_form_alter(&$form, &$form_state, $form_id) {

  $entity_type = $form['#entity_type'];
  $bundle_name = $form['#bundle'];

  // Get the bundle record.
  $bundle = db_select('tripal_bundle', 'tb')
    ->fields('tb')
    ->condition('bundle', $bundle_name)
    ->execute()
    ->fetchObject();

  if (module_exists('ds')) {
    drupal_set_message('Tripal is not compatible with the Display Suite (ds)
        module. If you would like to use Tripal-style panels for the layout
        of your pages please disable the Display Suite module. If you
        prefer to use the Display Suite module then disable the Tripal
        Fields Layout (tripal_fields_layout) module.', 'warning');
  }

  // Add a vertical tab fieldset at the bottom of the
  $form['overview_vert_tabs'] = array(
    '#type' => 'vertical_tabs'
  );
  $form['modes']['#group'] = 'overview_vert_tabs';
  $form['modes']['#weight'] = 1000;
  $form['te_add_panels'] = array(
    '#type' => 'fieldset',
    '#title' => 'Add a Panel',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'overview_vert_tabs'
  );
  $form['te_add_panels']['instructions'] = array(
    '#type' => 'item',
    '#markup' => t('You may add as many panels to your page layout as
        desired. Panels can be used to organize fields into categories....')
  );
  $form['te_add_panels']['panel_name'] = array(
    '#type' => 'textfield',
    '#title' => 'Panel Name',
    '#description' => t('Please provide a computer readable name for this
        panel.  The name should only contain alphanumeric values and
        underscores. It must not begin with a number.')
  );
  $form['te_add_panels']['panel_label'] = array(
    '#type' => 'textfield',
    '#title' => 'Panel Label',
    '#description' => t('Please provide a human readable label for this
        panel. This is the name that will appear to site visitors.')
  );
  $form['te_add_panels']['add_button'] = array(
    '#type' => 'submit',
    '#value' => 'Add Panel',
    '#name' => 'add-panel-submit'
  );

  // Arrange Panels
  $form['te_arrange_panels'] = array(
    '#type' => 'fieldset',
    '#title' => 'Arrange Panels',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'overview_vert_tabs'
  );
  $form['te_arrange_panels']['instructions'] = array(
    '#type' => 'item',
    '#markup' => t('Drag and drop the panel to change its order.')
  );
  $form['te_arrange_panels']['panel_items']['#tree'] = TRUE;
  // Get available panels
  $result = db_select('tripal_panels', 'tp')
            ->fields('tp', array('panel_id', 'name', 'label', 'weight'))
            ->condition('name', 'te_base', '<>')
            ->condition('name', 'te_disabled', '<>')
            ->condition('bundle_id', $bundle->id)
            ->orderby('weight', 'asc')
            ->execute();
  $has_panel = FALSE;
  foreach ($result as $item) {
    $form['te_arrange_panels']['panel_items'][$item->panel_id] = array(
      'label' => array(
        '#markup' => check_plain($item->label),
      ),
      'weight' => array(
        '#type' => 'weight',
        '#title' => t('Weight'),
        '#default_value' => $item->weight,
        '#delta' => 50,
        '#title_display' => 'invisible',
      ),
      'newlabel' => array(
        '#type' => 'textfield',
        '#default_value' => '',
        '#size' => 10
      ),
      'rename' => array(
        '#type' => 'button',
        '#value' => 'Rename',
        '#name' => "arrange-panel-rename-$item->panel_id",
      ),
      'remove' => array(
        '#type' => 'button',
        '#value' => 'Remove',
        '#name' => "arrange-panel-remove-$item->panel_id",
      )
    );
    $has_panel = TRUE;
  }
  if ($has_panel) {
    $form['te_arrange_panels']['panel_items']['#theme_wrappers'] = array('tripal_fields_layout_form_draggable_panel_table');
    // Now we add our submit button, for submitting the form results.
    //
    // The 'actions' wrapper used here isn't strictly necessary for tabledrag,
    // but is included as a Form API recommended practice.
    $form['te_arrange_panels']['add_button'] = array(
      '#type' => 'submit',
      '#value' => 'Save Panel Order',
      '#name' => 'order-panel-submit'
    );
  }
  else {
    $form['te_arrange_panels']['instructions']['#markup'] = t('You need to add some panel first.');
  }

  // Configure Panels
  $form['te_configure_panels'] = array(
    '#type' => 'fieldset',
    '#title' => 'Configure Panels',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'overview_vert_tabs'
  );

  // Make sure our default panels are in the database.
  _tripal_fields_layout_check_default_field_panels($bundle);

  // Now add each panel as a region.
  $form['fields']['#regions'] = array();
  $panels = db_select('tripal_panels', 'tp')
    ->fields('tp')
    ->condition('bundle_id', $bundle->id)
    ->orderBy('weight', 'ASC')
    ->orderBy('label', 'ASC')
    ->execute();
  $panel_options = array();
  while ($panel = $panels->fetchObject()) {
    $settings = unserialize($panel->settings);
    $form['fields']['#regions'][$panel->name] = array(
      'title' => t($panel->label),
      'message' => t($settings['message']),
    );
    $panel_options[$panel->name] = $panel->label;
  }

  // Set the table headers to add a new 'region' column.
  $form['fields']['#header'] = array(
    t('Field'),
    t('Weight'),
    t('Parent'),
    t('Label'),
    array('data' => t('Format'), 'colspan' => 3),
    t('Region'),
  );

  // Change the region callback for each field to place each field in the
  // proper "panel" region. Also, set the default region to be the base region.
  $fields = $form['fields'];
  $default_panel = 'te_base';

  foreach (element_children($fields) as $field_name) {
    $field_instance = field_info_instance($entity_type, $field_name, $bundle_name);
    $panel_id = db_select('tripal_panel_fields', 'tpf')
    ->fields('tpf', array('panel_id'))
    ->condition('field_id', $field_instance['id'])
    ->execute()
    ->fetchField();
    if ($panel_id) {
      $default_panel = db_select('tripal_panels', 'tp')
      ->fields('tp', array('name'))
      ->condition('panel_id', $panel_id)
      ->execute()
      ->fetchField();
    }
    $form['fields'][$field_name]['#region_callback'] = 'tripal_fields_layout_field_ui_row_region';
    $form['fields'][$field_name]['region'] = array(
      '#type' => 'select',
      '#options' => $panel_options,
      '#default_value' => $default_panel,
      '#attributes' => array(
        'class' => array('te-field-region'),
      )
    );
    $form['fields'][$field_name]['#field_instance_id'] = array(
      '#type' => 'value',
      '#value' => $field_instance['id']
    );
  }

  // Add validate and submit handlers. Rearrange the submit callbacks
  // so ours is first.
  $form['#validate'][] = 'tripal_fields_layout_field_ui_validate';
  $submit = $form['#submit'];
  $form['#submit'] = array('tripal_fields_layout_field_ui_submit');
  $form['#submit'] = array_merge($form['#submit'], $submit);
}

/**
 * A helper function for checking if the default panels are in the database.
 */
function _tripal_fields_layout_check_default_field_panels($bundle) {
  // Make sure we have records for our default regions: te_base and te_hidden.
  // First check if the base region is in the database. If not, add it.
  $te_base = db_select('tripal_panels', 'tp')
    ->fields('tp')
    ->condition('name', 'te_base')
    ->condition('bundle_id', $bundle->id)
    ->execute()
    ->fetchObject();
  if (!$te_base) {
    $settings = array(
      'message' => 'Fields that should appear at the top of each page should be placed in the base panel. These fields are always present and help orient the user by at least indicating the necessary information to uniquely identiy the content.',
    );
    db_insert('tripal_panels')
      ->fields(array(
        'bundle_id' => $bundle->id,
        'name' => 'te_base',
        'label' => 'Base Content',
        'settings' => serialize($settings),
        'weight' => -9999999
      ))
      ->execute();
  }
  // Next check if the hidden region is in the database. If not, add it.
  $te_base = db_select('tripal_panels', 'tp')
    ->fields('tp')
    ->condition('name', 'te_disabled')
    ->condition('bundle_id', $bundle->id)
    ->execute()
    ->fetchObject();
  if (!$te_base) {
    $settings = array(
      'message' => 'Place field here to hide them from display.',
    );
    db_insert('tripal_panels')
      ->fields(array(
        'bundle_id' => $bundle->id,
        'name' => 'te_disabled',
        'label' => 'Disabled',
        'settings' => serialize($settings),
        'weight' => 9999999
      ))
      ->execute();
  }
}

/**
 * Returns the region to which a row on the Field UI page belongs.
 *
 * @param $row
 *   The current row that is being rendered in the Field UI page.
 */
function tripal_fields_layout_field_ui_row_region($row) {
  $default_panel =  'te_base';
  $panel = '';

  $field_instance_id = $row['#field_instance_id']['#value'];

  // Get panel_id
  $panel_id = db_select('tripal_panel_fields', 'tpf')
  ->fields('tpf', array('panel_id'))
  ->condition('field_id', $field_instance_id)
  ->execute()
  ->fetchField();

  // Get panel name
  if ($panel_id) {
    $panel = db_select('tripal_panels', 'tp')
    ->fields('tp', array('name'))
    ->condition('panel_id', $panel_id)
    ->execute()
    ->fetchField();
  }

  // First get the panel
  if (!$panel) {
    $panel = $default_panel;
  }

  return $panel;

}
/**
 * Validates the field UI form to ensure proper panel assignments.
 *
 * @param $form
 * @param $form_state
 */
function tripal_fields_layout_field_ui_validate($form, &$form_state) {

  if ($form_state ['clicked_button'] ['#name'] == 'add-panel-submit') {
    // Check if a valide panel name is provided
    $name = $form_state ['values'] ['panel_name'];
    if (! $name) {
      form_set_error('panel_name', t ("Please provide a name for the new panel."));
    }
    else if (preg_match('/^\d+/', $name )) {
      form_set_error('panel_name', t ("Panel name must not begin with a number."));
    }
    else if (preg_match ('/\s+/', $name)) {
      form_set_error('panel_name', t ("Panel name should only contain alphanumeric values and underscores."));
    }

    // Check if a panel label is provided
    $label = $form_state ['values'] ['panel_label'];
    if (! $label) {
      form_set_error('panel_label', t ("Please provide a label for the new panel."));
    }
  }
  else if ($form_state['clicked_button'] ['#name'] == 'order-panel-submit') {

  }
  else if ($form_state['clicked_button'] ['#name'] == 'op') {

  }
  // Rename a Panel
  else if (preg_match('/^arrange-panel-rename-/', $form_state ['clicked_button'] ['#name'])) {
    $table = $form['te_arrange_panels']['panel_items'];
    $button = $form_state ['triggering_element'] ['#name'];
    $panel_id = str_replace ('arrange-panel-rename-', '', $button);
    $newlabel = $form_state['values']['panel_items'][$panel_id]['newlabel'];
    if (!trim($newlabel)) {
      form_set_error ('panel_label', t ( "Please provide a label to rename a panel." ) );
    }
    else {
      db_update('tripal_panels')
        ->fields(array(
          'label' => $newlabel
        ))
        ->condition ('panel_id', $panel_id)
        ->execute();
    }
  }
  // Remove a Panel
  else if (preg_match('/^arrange-panel-remove-/', $form_state ['clicked_button'] ['#name'])) {
    $table = $form['te_arrange_panels']['panel_items'];
    $button = $form_state ['triggering_element'] ['#name'];
    $panel_id = str_replace ('arrange-panel-remove-', '', $button);
    db_delete('tripal_panels')
    ->condition ('panel_id', $panel_id)
    ->execute();
    db_delete('tripal_panel_fields')
    ->condition ('panel_id', $panel_id)
    ->execute();
  }

}
/**
 * Responds to a submit from the field UI form for saving panel assignments.
 *
 * @param $form
 * @param $form_state
 */
function tripal_fields_layout_field_ui_submit($form, &$form_state) {
  // Add a new panel
  if ($form_state ['clicked_button'] ['#name'] == 'add-panel-submit') {
    $bundle_id = $form_state['build_info']['args'][1]->id;
    $name      = $form_state['values']['panel_name'];
    $label     = $form_state['values']['panel_label'];
    $settings = array(
      'message' => 'Place field in this panel.',
    );
    db_insert('tripal_panels')
    ->fields(array(
      'bundle_id' => $bundle_id,
      'name' => $name,
      'label' => $label,
      'settings' => serialize($settings),
      'weight' => 0
    ))
    ->execute();
  }
  // Order panel
  else if ($form_state ['clicked_button'] ['#name'] == 'order-panel-submit') {

    $panels = $form_state['values']['panel_items'];
    foreach ($panels AS $id => $panel) {
      db_query(
        'UPDATE {tripal_panels} SET weight = :weight WHERE panel_id = :id',
        array(
          ':weight' => $panel['weight'],
          ':id' => $id
        )
      );
    }
  }
  // Save field regions
  else if ($form_state ['clicked_button'] ['#name'] == 'op') {
    $fields = $form_state['values']['fields'];
    foreach($fields AS $field_name => $field_data){

      // Get field instance id
      $field_instance_id = $form['fields'][$field_name]['#field_instance_id']['#value'];

      // Get region panel_id
      $region = $field_data['region'];
      $panel_id = db_select('tripal_panels', 'tp')
      ->fields('tp', array('panel_id'))
      ->condition('name', $region)
      ->execute()
      ->fetchField();

      // Save
      $penal_field_id = db_select('tripal_panel_fields', 'tpf')
      ->fields('tpf', array('panel_field_id'))
      ->condition('field_id', $field_instance_id)
      ->execute()
      ->fetchField();
      if ($penal_field_id) {
        db_update('tripal_panel_fields')
        ->fields(array(
          'panel_id' => $panel_id,
        ))
        ->condition('panel_field_id', $penal_field_id)
        ->execute();
      }
      else {
        db_insert('tripal_panel_fields')
        ->fields(array(
          'panel_id' => $panel_id,
          'field_id' => $field_instance_id
        ))
        ->execute();
      }
    }
  }
}

/**
 *  Theme the Panel Order Table as a draggable table
 *
 * @param unknown $variables
 * @return unknown
 */
function theme_tripal_fields_layout_form_draggable_panel_table ($variables) {
  $element = $variables['element'];

  $rows = array();

  foreach (element_children($element) as $id) {

    // Add a custom class that can be identified by 'drupal_add_tabledrag'
    $element[$id]['weight']['#attributes']['class'] = array('tripal_panel-item-weight');

    $element[$id]['label']['#printed'] = FALSE;
    $element[$id]['weight']['#printed'] = FALSE;
    $element[$id]['newlabel']['#printed'] = FALSE;
    $element[$id]['rename']['#printed'] = FALSE;
    $element[$id]['remove']['#printed'] = FALSE;

    $rows[] = array(
      'data' => array(
        drupal_render($element[$id]['label']),
        drupal_render($element[$id]['weight']),
        drupal_render($element[$id]['newlabel']),
        drupal_render($element[$id]['rename']),
        drupal_render($element[$id]['remove'])
      ),
      // Add draggable to each row to support the tabledrag behaviour
      'class' => array('draggable'),
    );
  }

  // Create table header
  $header = array(t('Panel'), t('Weight'), t('New Lable'), t('Update'), t('Action'));

  // Create a unique id for drupal_add_tabledrag() to find the table object
  $table_id = 'tripal_panel-arrange_panel_table';

  // Create output
  $output = '';
  if (count($rows) > 0) {
    $output = theme('table', array(
      'header' => $header,
      'rows' => $rows,
      'attributes' => array('id' => $table_id),
    ));
  }

  // Call to the drupal_add_tabledrag
  drupal_add_tabledrag($table_id, 'order', 'sibling', 'tripal_panel-item-weight');

  return $output;
}

/**
 * Implements hook_theme().
 */
function tripal_fields_layout_theme($existing, $type, $theme, $path) {
  return array(
    'tripal_fields_layout_form_draggable_panel_table' => array(
      'render element' => 'element',
    ),
    'tripal_fields_layout_generic' => array(
      'render element' => 'element',
      'template' => 'tripal_fields_layout_generic',
      'path' => "$path/theme/templates",
    ),
  );
}

/**
 * Implements hook_entity_view.
 */
function tripal_fields_layout_entity_view($entity, $type, $view_mode, $langcode) {
  switch ($type) {
    case 'BioData':
      // Use the generic template to render the fields
      if ($view_mode == 'full') {

        $bundle = db_select('tripal_bundle', 'tb')
          ->fields('tb', array('id', 'bundle', 'label'))
          ->condition('bundle', $entity->bundle)
          ->execute()
          ->fetchObject();

        _tripal_fields_layout_check_default_field_panels($bundle);

        $results = db_select('tripal_panels', 'tp')
          ->fields('tp', array('panel_id','name', 'label'))
          ->condition('bundle_id', $bundle->id)
          ->orderBy('tp.weight', 'ASC')
          ->execute();

        $panels = array();
        $fields = array();
        $disabled_panel_id = 0;
        foreach ($results AS $row) {
          if ($row->name == 'te_disabled') {
            $disabled_panel_id = $row->panel_id;
          }
          else {
            $panels[$row->panel_id] = $row;
            $fields[$row->panel_id] = array();
          }
        }

        // Organize fields into panels
        foreach (element_children($entity->content) as $field_name) {
          $field_instance = field_info_instance ($type, $field_name, $entity->bundle);
          // Get default panel_id
          $default_panel_id = db_select('tripal_panels', 'tp')
            ->fields('tp', array('panel_id'))
            ->condition('bundle_id', $bundle->id)
            ->condition('name', 'te_base')
            ->execute()
            ->fetchField();
          // Get panel_id for the field
          $panel_id = db_select('tripal_panel_fields', 'tpf')
            ->fields('tpf', array('panel_id'))
            ->condition('field_id', $field_instance['id'])
            ->execute()
            ->fetchField();
          $panel_id = $panel_id ? $panel_id : $default_panel_id;
          // Do not show disabled fields
          if ($panel_id != $disabled_panel_id) {
            $fields[$panel_id][$field_name] = $entity->content[$field_name];
          }
          // Unset the field
          unset ($entity->content[$field_name]);
        }
        drupal_add_css(drupal_get_path('module','tripal_fields_layout') . '/theme/css/tripal_fields_layout.css');
        $entity->content['tripal_fields_layout_generic'] = array(
          '#theme' => 'tripal_fields_layout_generic',
          '#panels' => $panels,
          '#fields' => $fields,
        );
      }

      break;
  }
}