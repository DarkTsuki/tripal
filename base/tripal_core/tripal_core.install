<?php

/************************************************************************
*  Implementation of hook_install();
* 
* @ingroup tripal_core
*/
function tripal_core_install(){

   // make the data directory for this module
   $data_dir = file_directory_path() . "/tripal";
   if(!file_check_directory($data_dir,FILE_CREATE_DIRECTORY)){
      $message = "Cannot create directory $data_dir. This module may not ".
                 "behave correctly without this directory.  Please  create ".
                 "the directory manually or fix the problem and reinstall.";
      drupal_set_message($message,'error');      
      watchdog('tripal_core',$message,array(),WATCHDOG_ERROR);
   }

  // create the tables that manage materialized views and jobs
  drupal_install_schema('tripal_core');

}

/************************************************************************
* Implementation of hook_schema().
*
* @ingroup tripal_core
*/
function tripal_core_schema() {
   $schema = tripal_core_get_schemas();
   return $schema;
}
/************************************************************************
* Implementation of hook_uninstall()
*
* @ingroup tripal_core
*/
function tripal_core_uninstall(){
   drupal_uninstall_schema('tripal_core');
}

/************************************************************************
* This function simply defines all tables needed for the module to work
* correctly.  By putting the table definitions in a separate function we
* can easily provide the entire list for hook_install or individual
* tables for an update.
*
* @ingroup tripal_core
*/
function tripal_core_get_schemas (){  
   $schema = array();

   // get all the various schema parts and join them together
   $temp = tripal_core_jobs_schema();
   foreach ($temp as $table => $arr){ 
      $schema[$table] = $arr; 
   }
   $temp = tripal_core_mviews_schema();
   foreach ($temp as $table => $arr){ 
      $schema[$table] = $arr; 
   }
   $temp = tripal_core_views_schema();
   foreach ($temp as $table => $arr){ 
      $schema[$table] = $arr; 
   } 

	return $schema;
}
/************************************************************************
* 
*
* @ingroup tripal_core
*/
function tripal_core_mviews_schema(){
   $schema = array();
   $schema['tripal_mviews'] = array(
      'fields' => array(
         'mview_id'      => array('type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE),
         'name'          => array('type' => 'varchar','length' => 255, 'not null' => TRUE),
         'modulename'    => array('type' => 'varchar','length' => 50, 'not null' => TRUE, 'description' => 'The module name that provides the callback for this job'),
         'mv_table'      => array('type' => 'varchar','length' => 128, 'not null' => TRUE),
         'mv_specs'      => array('type' => 'text', 'size' => 'normal', 'not null' => TRUE),
         'indexed'       => array('type' => 'text', 'size' => 'normal', 'not null' => TRUE),
         'query'         => array('type' => 'text', 'size' => 'normal', 'not null' => TRUE),
         'special_index' => array('type' => 'text', 'size' => 'normal', 'not null' => FALSE),
         'last_update'   => array('type' => 'int', 'not null' => FALSE, 'description' => 'UNIX integer time'),
      ),
      'indexes' => array(
         'mview_id' => array('mview_id')
      ),
      'unique keys' => array(
         'mv_table' => array('mv_table'),
         'mv_name' => array('name'),
      ),
      'primary key' => array('mview_id'),
  );
  return $schema;
}
/************************************************************************
* 
*
* @ingroup tripal_core
*/
function tripal_core_jobs_schema(){
   $schema = array();
   $schema['tripal_jobs'] = array(
      'fields' => array(
         'job_id' => array('type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE),
         'uid' => array ('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'description' => 'The Drupal userid of the submitee'),
         'job_name' => array('type' => 'varchar','length' => 255, 'not null' => TRUE),
         'modulename' => array('type' => 'varchar','length' => 50, 'not null' => TRUE, 'description' => 'The module name that provides the callback for this job'),
         'callback' => array('type' => 'varchar','length' => 255, 'not null' => TRUE),
         'arguments' => array('type' => 'text', 'size' => 'normal', 'not null' => FALSE),
         'progress' => array('type' => 'int', 'unsigned' => TRUE, 'default' => 0, 'not null' => FALSE, 'description' => 'a value from 0 to 100 indicating percent complete'),
         'status' => array('type' => 'varchar','length' => 50, 'not null' => TRUE),
         'submit_date' => array ('type' => 'int', 'not null' => TRUE, 'description' => 'UNIX integer submit time'),
         'start_time' => array ('type' => 'int', 'not null' => FALSE, 'description' => 'UNIX integer start time'),
         'end_time' => array ('type' => 'int', 'not null' => FALSE, 'description' => 'UNIX integer end time'),
         'error_msg' => array('type' => 'text','size' => 'normal', 'not null' => FALSE),
         'pid' => array ('type' => 'int', 'unsigned' => TRUE, 'not null' => FALSE, 'description' => 'The process id for the job'),
         'priority' => array ('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => '0', 'description' => 'The job priority'),
         'mlock' => array ('type' => 'int', 'unsigned' => TRUE, 'not null' => FALSE, 'description' => 'If set to 1 then all jobs for the module are held until this one finishes'),
         'lock' => array ('type' => 'int', 'unsigned' => TRUE, 'not null' => FALSE, 'description' => 'If set to 1 then all jobs are held until this one finishes'),
      ),
      'indexes' => array(
         'job_id' => array('job_id'),
         'job_name' => array('job_name')
      ),
      'primary key' => array('job_id'),
   );
   return $schema;
}
/************************************************************************
* 
*
* @ingroup tripal_core
*/
function tripal_core_views_schema(){
   $schema = array();
	$schema['tripal_views'] = array(
		'description' => 'contains the setupes, their materialized view id and base table name that was used.',
		'fields' => array(
			'setup_id' => array(
				'description' => 'the id of the setup',
				'type' => 'serial',
				'unsigned' => TRUE,
				'not null' => TRUE,
			),
			'mview_id' => array(
				'description' => 'the materialized view used for this setup',
				'type' => 'int',
				'unsigned' => TRUE,
			),
			'table_name' => array(
				'description' => 'the base table name to be used when using this setup. Use this field when not using a materialized view',
				'type' => 'varchar',
				'length' => 255,
				'not null' => TRUE,
				'default' => '',
			),
			'name' => array(
				'description' => 'Human readable name of this setup',
				'type' => 'varchar',
				'length' => 255,
				'not null' => TRUE,
				'default' => '',
			),
			'comment' => array(
				'description' => 'add notes about this views setup',
				'type' => 'text',
				'size' => 'normal',
				'not null' => FALSE,
				'default' => '',
			),
		),
		'unique_keys' => array(
			'setup_id' => array('setup_id'),
		),
		'primary key' => array('setup_id'),
	);

	$schema['tripal_views_join'] = array(
		'description' => 'coordinate the joining of tables',
		'fields' => array(
		  'view_join_id' => array(
				'description' => 'the id of the join',
				'type' => 'serial',
				'unsigned' => TRUE,
				'not null' => TRUE,
		  ),
			'setup_id' => array(
				'description' => 'setup id from tripal_views table',
				'type' => 'int',
				'unsigned' => TRUE,
				'not null'=> TRUE,
			),
			'base_table' => array(
			   'description' => 'the name of the base table',
				'type' => 'varchar',
				'length' => '255',
				'not null' => TRUE,
				'default' => '',
	      ),
			'base_field' => array(
				'description' => 'the name of the base table column that will be joined',
				'type' => 'varchar',
				'length' => '255',
				'not null' => TRUE,
				'default' => '',
			),
			'left_table' => array(
				'description' => 'the table on which to perform a left join',
				'type' => 'varchar',
				'length' => '255',
				'not null' => TRUE,
				'default' => '',
			),
			'left_field' => array(
				'description' => 'the column on which to perform a left join',
				'type' => 'varchar',
				'length' => '255',
				'not null' => TRUE,
				'default' => '',
	      ),
		),
		'unique_keys' => array(
			'setup_id' => array('view_join_id'),
		),
		'primary key' => array('view_join_id'),
	);

	$schema['tripal_views_handlers'] = array(
		'description' => 'in formation for views: column and views handler name',
		'fields' => array(
			'handler_id' => array(
				'description' => 'the id of the handler',
				'type' => 'serial',
			   'unsigned' => TRUE,
			   'not null' => TRUE,
	      ),
			'setup_id' => array(
				'description' => 'setup id from the tripal_views table',
				'type' => 'int',
				'unsigned' => TRUE,
				'not null'=> TRUE,
			),
			'column_name' => array(
				'description' => '',
				'type' => 'varchar',
				'length' => '255',
				'not null' => TRUE,
				'default' => '',
			),
			'handler_type' => array(
				'description' => 'identifies the type of hander (e.g. field, filter, sort, argument, relationship, etc.)',
				'type' => 'varchar',
				'length' => '50',
				'not null' => TRUE,
				'default' => '',
			),
			'handler_name' => array(
				'description' => 'the name of the handler',
				'type' => 'varchar',
				'length' => '255',
				'not null' => TRUE,
				'default' => '',
			),
			'arguments' => array(
				'description' => 'arguments that may get passed to the handler',
				'type' => 'text',
				'size' => 'normal',
				'not null' => FALSE,
				'default' => '',
			),
		),
		'unique_keys' => array(
		   'setup_id' => array('handler_id'),
	   ),
		'primary key' => array('handler_id'),
	);

   return $schema;
}
/************************************************************************
* 
*
* @ingroup tripal_core
*/
function tripal_core_update_6000(){
   $schema = tripal_core_views_schema();
   $ret = array();
   foreach ($schema as $name => $table) {
      db_create_table($ret, $name, $table);
   }   
   return $ret;
}

?>
