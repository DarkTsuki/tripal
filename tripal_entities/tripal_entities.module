<?php

require_once "api/tripal_entities.api.inc";
require_once "includes/tripal_entities.field_storage.inc";
require_once "includes/tripal_entities.fields.inc";
require_once "includes/ChadoData.inc";
require_once "includes/ChadoDataController.inc";
require_once "includes/ChadoDataUIController.inc";
require_once "includes/ChadoDataType.inc";
require_once "includes/ChadoDataTypeController.inc";
require_once "includes/ChadoDataTypeUIController.inc";


/**
 * Implements hook_permission().
 */
function tripal_entities_permission() {
  // We set up permisssions to manage entity types, manage all entities and the
  // permissions for each individual entity
  $permissions = array(
    'administer chado data types' => array(
      'title' => t('Administer Chado data types'),
      'description' => t('Create and delete fields for Chado data types, and set their permissions.'),
    ),
    'administer chado data' => array(
      'title' => t('Administer Chado data'),
      'description' => t('Edit and delete all chado data'),
    ),
  );

  // Generate permissions per each data type.
  foreach (chado_data_get_types() as $type) {
    $type_name = check_plain($type->type);
    $permissions += array(
      "edit any $type_name data" => array(
        'title' => t('%type_name: Edit any', array('%type_name' => $type->label)),
      ),
      "view any $type_name data" => array(
        'title' => t('%type_name: View any', array('%type_name' => $type->label)),
      ),
    );
  }
  return $permissions;
}

/**
 * Implements hook_theme().
 */
function tripal_entities_theme($existing, $type, $theme, $path) {
  return array(
    'chado_data' => array(
      'render element' => 'elements',
      'template' => 'chado_data',
      'path' => "$path/theme/templates"
    ),
  );
}

/**
 * https://api.drupal.org/api/drupal/modules!rdf!rdf.module/group/rdf/7
 */
function tripal_entities_rdf_mapping() {
  return array();
/*   return array(
    'type' => 'chado_data',
    'bundle' => 'gene',
    'mapping' => array(
      'rdftype' => array('sioc:Item', 'foaf:Document'),
      'title' => array(
        'predicates' => array('dc:title'),
      ),
      'uid' => array(
        'predicates' => array('sioc:has_creator'),
        'type' => 'rel',
      ),
      'name' => array(
        'predicates' => array('foaf:name'),
      ),
      'uniquename' => array(
        'predicates' => array('foaf:name'),
      ),
      'organism_id' => array(
        'predicates' => array('sioc:has_parent'),
        'type' => 'rel'
      )
    ),
  ); */
}

// http://www.bluespark.com/blog/drupal-entities-part-3-programming-hello-drupal-entity
// http://dikini.net/31.08.2010/entities_bundles_fields_and_field_instances
/**
 * Implement hook_entity_info().
 */
function tripal_entities_entity_info() {
  $entities = array();

  $entities['chado_data'] = array(
    // A human readable label to identify our entity.
    'label' => t('Chado Data'),
    'plural label' => t('Vocabulary Terms'),

    // The entity class and controller class extend the classes provided by the
    // Entity API.
    'entity class' => 'ChadoData',
    'controller class' => 'ChadoDataController',

    // The table for this entity defined in hook_schema()
    'base table' => 'chado_data',

    // Returns the uri elements of an entity.
    'uri callback' => 'tripal_entities_vocbulary_term_uri',

    // IF fieldable == FALSE, we can't attach fields.
    'fieldable' => TRUE,

    // entity_keys tells the controller what database fields are used for key
    // functions. It is not required if we don't have bundles or revisions.
    // Here we do not support a revision, so that entity key is omitted.
    'entity keys' => array(
      'id' => 'entity_id',
      'bundle' => 'type',
    ),
    'bundle keys' => array(
      'bundle' => 'type',
    ),

    // Callback function for access to this entity.
    'access callback' => 'chado_data_access',

    // FALSE disables caching. Caching functionality is handled by Drupal core.
    'static cache' => FALSE,

    // Bundles are added in the hook_entities_info_alter() function.
    'bundles' => array(),

    'label callback' => 'entity_class_label',
    'creation callback' => 'chado_data_create',

    // The information below is used by the ChadoDataUIController
    // (which extends the EntityDefaultUIController).  The admin_ui
    // key here is mean to appear on the 'Find Content' page of the
    // administrative menu.
    'admin ui' => array(
      'path' => 'admin/content/data',
      'controller class' => 'ChadoDataUIController',
      'menu wildcard' => '%chado_data',
      'file' => 'includes/ChadoDataUIController.inc',
    ),
    'view modes' => array(
      'full' => array(
        'label' => t('Full content'),
        'custom settings' => FALSE,
      ),
      'teaser' => array(
        'label' => t('Teaser'),
        'custom settings' => TRUE,
      ),
    ),
  );

  // The entity that holds information about the entity types
  $entities['chado_data_type'] = array(
    'label' => t('Chado Data Type'),
    'entity class' => 'ChadoDataType',
    'controller class' => 'ChadoDataTypeController',
    'base table' => 'chado_data_type',
    'fieldable' => FALSE,
    // If this entity can be used as a bundle of another entity then
    // that can be specified via the 'bundle of' key.
    'bundle of' => 'chado_data',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'label' => 'label',
    ),
    'access callback' => 'chado_data_type_access',
    'module' => 'tripal_entities',
    // Enable the entity API's admin UI.
    'admin ui' => array(
      'path' => 'admin/structure/data_types',
      'controller class' => 'ChadoDataTypeUIController',
      'file' => 'includes/ChadoDataTypeUIController.inc',
    ),
  );
  return $entities;
}
/**
 * Implements hook_entity_info_alter().
 *
 * We are adding the info about the chado data types via a hook to avoid a
 * recursion issue as loading the model types requires the entity info as well.
 *
 */
function tripal_entities_entity_info_alter(&$entity_info) {

  // Bundles are alternative groups of fields or configuration
  // associated with a base entity type.
  // We want to dynamically add the bundles (or term types) to the entity.
  $values = array(
    'cv_id' => array(
      'name' => 'sequence'
    ),
    'name' => 'gene',
  );
  $cvterm = chado_generate_var('cvterm', $values);
  $label = preg_replace('/_/', ' ', ucwords($cvterm->name));
  $type = $cvterm->dbxref_id->db_id->name . '_' . $cvterm->dbxref_id->accession;
  $entity_info['chado_data']['bundles'][$type] = array(
    'label' => $label,
    'admin' => array(
      'path' => 'admin/structure/data_types/manage/%chado_data_type',
      'real path' => 'admin/structure/data_types/manage/' . $type,
      'bundle argument' => 4,
      'access arguments' => array('administer chado data types'),
    ),
  );
}