<?php

require_once "api/tripal_entities.api.inc";
require_once "includes/tripal_entities.field_storage.inc";
require_once "includes/tripal_entities.fields.inc";
require_once "includes/tripal_entities.tables.inc";
require_once "includes/TripalData.inc";
require_once "includes/TripalDataController.inc";
require_once "includes/TripalDataUIController.inc";
require_once "includes/TripalDataType.inc";
require_once "includes/TripalDataTypeController.inc";
require_once "includes/TripalDataTypeUIController.inc";

/**
 * Implements hook_views_api().
 */
function tripal_entities_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Implements hook_menu().
 */
function tripal_entities_menu() {

  $items = array();

  // The content menu.
  $items['admin/content/tripal_data'] = array(
    'title' => 'Biological Data',
    'page callback' => 'tripal_entities_content_view',
    'file' =>  'includes/tripal_entities.admin.inc',
    'access arguments' => array('administer tripal data'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/content/tripal_data/add'] = array(
    'title' => 'Add Biological Data',
    'page callback'  => 'drupal_get_form',
    'page arguments' => array('tripal_data_form'),
    'access arguments' => array('administer tripal data'),
    'type' => MENU_LOCAL_ACTION,
  );


  // The administative settings menu.
  $items['admin/tripal/data_types'] = array(
    'title' => 'Biological Data',
    'description' => 'Tools for publishing, configurating and managing biological data.',
    'page callback' => 'tripal_entities_admin_view',
    'access arguments' => array('administer tripal data types'),
    'file' =>  'includes/tripal_entities.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  // The default tab.
  $items['admin/tripal/data_types/default'] = array(
    'title' => 'Biological Data',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' =>  1,
  );

  $items['admin/tripal/data_types/publish'] = array(
    'title' => 'Publish',
    'description' => 'Publish Data',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tripal_entities_admin_publish_form'),
    'access arguments' => array('administer tripal data types'),
    'file' =>  'includes/tripal_entities.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 2
  );

  $items['admin/tripal/data_types/access'] = array(
    'title' => 'Access',
    'description' => 'Set default access permissions for collections of data.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tripal_entities_admin_access_form'),
    'access arguments' => array('administer tripal data types'),
    'file' =>  'includes/tripal_entities.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 3
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function tripal_entities_permission() {
  // We set up permisssions to manage entity types, manage all entities and the
  // permissions for each individual entity
  $permissions = array(
    'administer tripal data types' => array(
      'title' => t('Administer Tripal data types'),
      'description' => t('Create and delete fields for Tripal data types, and set their permissions.'),
    ),
    'administer tripal data' => array(
      'title' => t('Administer Tripal data'),
      'description' => t('Edit and delete all tripal data'),
    ),
  );

  // Generate permissions per each data type.
  foreach (tripal_data_get_types() as $type) {
    $type_name = check_plain($type->type);
    $permissions += array(
      "edit any $type_name data" => array(
        'title' => t('%type_name: Edit any', array('%type_name' => $type->label)),
      ),
      "view any $type_name data" => array(
        'title' => t('%type_name: View any', array('%type_name' => $type->label)),
      ),
    );
  }
  return $permissions;
}

/**
 * Implements hook_theme().
 */
function tripal_entities_theme($existing, $type, $theme, $path) {
  return array(
    'tripal_data' => array(
      'render element' => 'elements',
      'template' => 'tripal_data',
      'path' => "$path/theme/templates"
    ),
  );
}

/**
 * https://api.drupal.org/api/drupal/modules!rdf!rdf.module/group/rdf/7
 */
function tripal_entities_rdf_mapping() {
  return array();
/*   return array(
    'type' => 'tripal_data',
    'bundle' => 'gene',
    'mapping' => array(
      'rdftype' => array('sioc:Item', 'foaf:Document'),
      'title' => array(
        'predicates' => array('dc:title'),
      ),
      'uid' => array(
        'predicates' => array('sioc:has_creator'),
        'type' => 'rel',
      ),
      'name' => array(
        'predicates' => array('foaf:name'),
      ),
      'uniquename' => array(
        'predicates' => array('foaf:name'),
      ),
      'organism_id' => array(
        'predicates' => array('sioc:has_parent'),
        'type' => 'rel'
      )
    ),
  ); */
}

// http://www.bluespark.com/blog/drupal-entities-part-3-programming-hello-drupal-entity
// http://dikini.net/31.08.2010/entities_bundles_fields_and_field_instances
/**
 * Implement hook_entity_info().
 */
function tripal_entities_entity_info() {
  $entities = array();

  // Get a list of published vocabularies from 'tripal_vocabulary
  $published_vocs = chado_generate_var('tripal_vocabulary', array('publish' => 1), array('return_array' => 1));

  foreach ($published_vocs as $voc) {
    $entities [$voc->db_id->name] = array (
      // A human readable label to identify our entity.
      'label' => $voc->db_id->name . ' (' . $voc->cv_id->name . ')',
      'plural label' => $voc->db_id->name . ' (' . $voc->cv_id->name . ')',

      // The entity class and controller class extend the classes provided by the
      // Entity API.
      'entity class' => 'TripalData',
      'controller class' => 'TripalDataController',

      // The table for this entity defined in hook_schema()
      'base table' => 'tripal_data',

      // Returns the uri elements of an entity.
      'uri callback' => 'tripal_entities_vocbulary_term_uri',

      // IF fieldable == FALSE, we can't attach fields.
      'fieldable' => TRUE,

      // entity_keys tells the controller what database fields are used for key
      // functions. It is not required if we don't have bundles or revisions.
      // Here we do not support a revision, so that entity key is omitted.
      'entity keys' => array (
        'id' => 'id',
        'bundle' => 'bundle'
      ),
      'bundle keys' => array (
        'bundle' => 'bundle'
      ),

      // Callback function for access to this entity.
      'access callback' => 'tripal_data_access',

      // FALSE disables caching. Caching functionality is handled by Drupal core.
      'static cache' => FALSE,

      // Bundles are added in the hook_entities_info_alter() function.
      'bundles' => array (),

      'label callback' => 'tripal_data_label',

      // The information below is used by the TripalDataUIController
      // (which extends the EntityDefaultUIController). The admin_ui
      // key here is mean to appear on the 'Find Content' page of the
      // administrative menu.
      'admin ui' => array (
        'path' => 'admin/content/data',
        'controller class' => 'TripalDataUIController',
        'menu wildcard' => '%tripal_data',
        'file' => 'includes/TripalDataUIController.inc'
      ),
      'view modes' => array (
        'full' => array (
          'label' => t ( 'Full content' ),
          'custom settings' => FALSE
        ),
        'teaser' => array (
          'label' => t ( 'Teaser' ),
          'custom settings' => TRUE
        )
      )
    );

    // The entity that holds information about the entity types
    $entities [$voc->db_id->name . '_type'] = array (
      'label' => t ($voc->db_id->name . ' (' . $voc->cv_id->name . ')' . ' Type' ),
      'entity class' => 'TripalDataType',
      'controller class' => 'TripalDataTypeController',
      'base table' => 'tripal_data_type',
      'fieldable' => FALSE,
      // If this entity can be used as a bundle of another entity then
      // that can be specified via the 'bundle of' key.
      'bundle of' => $voc->db_id->name,
      'exportable' => TRUE,
      'entity keys' => array (
        'id' => 'id',
        'name' => 'type',
        'label' => 'label'
      ),
      'access callback' => 'tripal_data_type_access',
      'module' => 'tripal_entities',
      // Enable the entity API's admin UI.
      'admin ui' => array (
        'path' => 'admin/structure/data_types',
        'controller class' => 'TripalDataTypeUIController',
        'file' => 'includes/TripalDataTypeUIController.inc'
      )
    );
  }
  return $entities;
}
/**
 * Implements hook_entity_info_alter().
 *
 * We are adding the info about the tripal data types via a hook to avoid a
 * recursion issue as loading the model types requires the entity info as well.
 *
 */
function tripal_entities_entity_info_alter(&$entity_info) {

  // Get a list of published terms from 'tripal_term
  $published_terms = chado_generate_var('tripal_term', array('publish' => 1), array('return_array' => 1));
  foreach ( $published_terms as $term ) {

    // Bundles are alternative groups of fields or configuration
    // associated with a base entity type.
    // We want to dynamically add the bundles (or term types) to the entity.
    $cvterm = $term->cvterm_id;
    $bundle_id = $cvterm->dbxref_id->db_id->name . '_' . $cvterm->dbxref_id->accession;
    $label = preg_replace('/_/', ' ', ucwords($cvterm->name));
    $entity_info[$cvterm->dbxref_id->db_id->name]['bundles'][$bundle_id] = array (
      'label' => $label,
      'admin' => array (
        'path' => 'admin/structure/data_types/manage/%tripal_data_type',
        'real path' => 'admin/structure/data_types/manage/' . $bundle_id,
        'bundle argument' => 4,
        'access arguments' => array (
          'administer tripal data types'
        )
      )
    );
  }
}

/**
 * Get published vocabularies as select options
 * @return multitype:NULL
 */
function tripal_entities_get_published_vocabularies_as_select_options() {
  $published_vocs = chado_generate_var('tripal_vocabulary', array('publish' => 1), array('return_array' => 1));
  $options = array();
  foreach ($published_vocs as $voc) {
    $options [$voc->cv_id->cv_id] = $voc->cv_id->name;
  }
  return $options;
}

/**
 * Get published terms as select options
 * @return multitype:NULL
 */
function tripal_entities_get_published_terms_as_select_options($cv_id = NULL) {
  $where = array('publish' => 1);
  $published_terms = chado_generate_var('tripal_term', $where, array('return_array' => 1));
  $options = array();
  foreach ($published_terms as $term) {
    if (!$cv_id) {
      $options [$term->cvterm_id->name] = $term->cvterm_id->name;
    } else {
      if ($term->cvterm_id->cv_id->cv_id == $cv_id) {
        $options [$term->cvterm_id->name] = $term->cvterm_id->name;
      }
    }
  }
  return $options;
}