<?php
/**
 * @file
 * Install for a tripal data entity - creates the base table for our entity.
 */

/**
 * Implements hook_install().
 */
function tripal_entities_install() {

  // Create a number of Chado custom tables to keep track of vocabularies and terms
  // that are available for use with entities.
  // @TODO: Ask Stephen why these are chado instead of drupal tables...
  chado_create_custom_table(
    'tripal_vocabulary',
    tripal_entities_tripal_vocabulary_schema(),
    TRUE
  );
  chado_create_custom_table(
    'tripal_vocabulary_usage',
    tripal_entities_tripal_vocabulary_usage_schema(),
    TRUE
  );
  chado_create_custom_table(
    'tripal_term',
    tripal_entities_tripal_term_schema(),
    TRUE
  );
  chado_create_custom_table(
    'tripal_term_usage',
    tripal_entities_tripal_term_usage_schema(),
    TRUE
  );
  chado_create_custom_table(
    'tripal_term_relationship',
    tripal_entities_tripal_term_relationship_schema(),
    TRUE
  );

  // Unfortunately, some Chado base tables do not have a type_id, so we must
  // take special action for those tables.  These include: organism and
  // analysis. Until we can find an appropriate controlled vocabulary
  // that is well supported by the community with types for these tables we
  // will have to use in-house terms.

  // Add a term to be used for an inherent 'type_id' for the organism table.
  tripal_insert_cvterm(array(
    'id' => 'local:organism',
    'name' => 'organism',
    'definition' => 'An individual form of life, such as a bacterium, protist, ' .
      'fungus, plant, or animal, composed of a single cell or a complex of cells  ' .
      'in which organelles or organs work together to carry out the various  ' .
      'processes of life. (American Heritage® Dictionary of the English ' .
      'Language, Fifth Edition. Copyright © 2011 by Houghton Mifflin ' .
      'Harcourt Publishing Company).',
    'cv_name' => 'local',
  ));

  // Add a term to be used for an inherent 'type_id' for the organism table.
  tripal_insert_cvterm(array(
    'id' => 'local:analysis',
    'name' => 'analysis',
    'definition' => 'A process as a method of studying the nature of something ' .
      'or of determining its essential features and their relations. ' .
      '(Random House Kernerman Webster\'s College Dictionary, © 2010 K ' .
      'Dictionaries Ltd).',
    'cv_name' => 'local',
  ));

  // We want to provide a set of commonly used entity types by default. This
  // way when a user first installs Tripal there are some commonly used
  // formats.
  module_load_include('inc', 'tripal_entities', 'api/tripal_entities.api');
  module_load_include('inc', 'tripal_entities', 'includes/tripal_entities.admin');

  // Create the 'Organism' entity type. This uses the local:organism term.
  $error = '';
  $term = array('name' => 'organism', 'cv_id' => array('name' => 'local'));
  $cvterm = chado_generate_var('cvterm', $term);
  if (!tripal_create_entity_type($cvterm, $error)) {
    throw new Exception($error);
  }

  // Create the 'Organism' entity type. This uses the local:organism term.
  $error = '';
  $term = array('name' => 'analysis', 'cv_id' => array('name' => 'local'));
  $cvterm = chado_generate_var('cvterm', $term);
  if (!tripal_create_entity_type($cvterm, $error)) {
    throw new Exception($error);
  }
}

/**
 * Implements hook_schema().
 */
function tripal_entities_schema() {

  // Biological Data
  $schema['tripal_entity'] = tripal_entities_tripal_entity_schema();

  // Biological Data Types
  $schema['tripal_bundle'] = tripal_entities_tripal_bundle_schema();

  // Links Biological Data Entities to the chado "base" table the data is stored in.
  $schema['chado_entity'] = tripal_entities_chado_entity_schema();

  return $schema;
}

/**
 * Implements hook_uninstall().
 *
 * At uninstall time we'll notify field.module that the entity was deleted
 * so that attached fields can be cleaned up.
 */
function tripal_entities_uninstall() {
  $terms = chado_generate_var('tripal_term', array('publish' => 1), array('return_array' => 1));
  foreach ($terms as $term) {
    $bundle_id = $term->cvterm_id->dbxref_id->db_id->name . '_' . $term->cvterm_id->dbxref_id->accession;
    field_attach_delete_bundle('BioData', $bundle_id);
  }
}

/**
 * @section
 * Schema Definitions.
 */

/**
 * The base table for Biological Data Entities.
 *
 * This contains the actual data. For example, if you have a 5 genes and 10 mRNA then
 * this table will have 15 records and include both genes and mRNA's.
 */
function tripal_entities_tripal_entity_schema() {

  $schema = array(
    'description' => 'The base table for Tripal Vocabulary-based entities.',
    'fields' => array(
      'id' => array(
        'description' => 'The primary identifier for a vocabulary entity.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'The type of entity. This should be an official vocabulary ID (e.g. SO, RO, GO).',
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
      ),
      'bundle' => array(
        'description' => 'The type of bundle. This should be an official vocabulary ID (e.g. SO, RO, GO) followed by an underscore and the term accession.',
        'type' => 'varchar',
        'length' => 1024,
        'not null' => TRUE,
        'default' => '',
      ),
      'cvterm_id' => array(
        'description' => 'The cvterm_id for the type of entity. This cvterm_id should match a record in the Chado cvterm table.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'title' => array(
        'description' => 'The title of this node, always treated as non-markup plain text.',
        'type' => 'text',
        'not null' => TRUE,
        'default' => '',
      ),
      'uid' => array(
        'description' => 'The {users}.uid that owns this node; initially, this is the user that created it.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'status' => array(
        'description' => 'Boolean indicating whether the node is published (visible to non-administrators).',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the node was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the node was most recently saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'indexes' => array(
      'cvterm_id' => array('cvterm_id'),
      'entity_changed' => array('changed'),
      'entity_created' => array('created'),
      'type' => array('type'),
      'uid' => array('uid'),
    ),
    'unique keys' => array(
    ),
    'primary key' => array('id'),
  );
  return $schema;
}

/**
 * The base table for Biological Data Type Entites.
 * This table contains a list of Biological Data Types.
 * For the example above (5 genes and 10 mRNAs), there would only be two records in
 * this table one for "gene" and another for "mRNA".
 */
function tripal_entities_tripal_bundle_schema() {

  $schema = array(
    'description' => 'Stores information about defined tripal data types.',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique Chado data type identifier.',
      ),
      'type' => array(
        'description' => 'The type of entity. This should be an official vocabulary ID (e.g. SO, RO, GO).',
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
      ),
      'bundle' => array(
        'description' => 'The type of bundle. This should be an official vocabulary ID (e.g. SO, RO, GO) followed by an underscore and the term accession.',
        'type' => 'varchar',
        'length' => 1024,
        'not null' => TRUE,
        'default' => '',
      ),
      'label' => array(
        'description' => 'The human-readable name of this bundle.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'The weight of this tripal data type in relation to others.',
      ),
      'data' => array(
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of additional data related to this tripal data type.',
      ),
    ) + entity_exportable_schema_fields(),
    'primary key' => array('id'),
    'unique keys' => array(
      'bundle' => array('bundle'),
    ),
  );
  return $schema;
}

/**
 * Links Biological Data Entities to the chado "base" table the data is stored in.
 * This is where we would specify that a particular gene maps to the record in the
 * chado.feature table with a feature_id=2432;
 */
function tripal_entities_chado_entity_schema() {

  $schema = array(
    'description' => 'The linker table that associates an enitity from the public.tripal_entity table with a "base" record in Chado',
    'fields' => array(
      'chado_entity_id' => array(
        'description' => 'The primary identifier for this table.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'entity_id' => array(
        'description' => 'The unique entity id.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'record_id' => array(
        'description' => 'The unique numerical identifier for the record that this entity is associated with (e.g. feature_id, stock_id, library_id, etc.).',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'data_table' => array(
        'description' => 'Indicates the table in Chado that this term services (e.g. feature, stock, library, etc.)',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
      'type_table' => array(
        'description' => 'Sometimes the record in the data table doesn’t have a field that specifies  the record type.  For example, an analysis type is stored in the analysisprop table.  If the data_table does have a type field then this value will be the same as the data_table.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
      'field' => array(
        'description' => 'The name of the field in the typetable that contains the cvterm record.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => FALSE,
        'default' => ''
      ),
    ),
    'indexes' => array(
      'record_id' => array('record_id'),
      'entity_id' => array('entity_id'),
      'data_table' => array('data_table'),
    ),
    'unique keys' => array(
      'record' => array('data_table', 'record_id'),
      'entity_id' => array('entity_id'),
    ),
    'primary key' => array('chado_entity_id'),
  );
  return $schema;
}

/**
 * A list of published vocabularies.
 *
 * Usage: This table will be used by the Entity type admin page that lets the site admin
 *   specify which vocabularies should be used as entity types.  This table will only be
 *   populated with vocabularies that are actually used within the Chado database.  This
 *   table will also be used by web services to provide a list of all of the entity types
 *   that are available for access.
 */
function tripal_entities_tripal_vocabulary_schema() {

  $schema = array (
    'table' => 'tripal_vocabulary',
    'fields' => array (
      'vocabulary_id' => array(
        'type' => 'serial',
        'not null' => TRUE
      ),
      'cv_id' => array (
        'type' => 'int',
        'not null' => TRUE
      ),
      'db_id' => array (
        'type' => 'int',
        'not null' => TRUE
      ),
      'publish' => array (
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0
      ),
    ),
    'primary key' => array (
      0 => 'vocabulary_id'
    ),
    'foreign keys' => array (
      'cv' => array (
        'table' => 'cv',
        'columns' => array (
          'cv_id' => 'cv_id'
        )
      ),
      'db' => array (
        'table' => 'db',
        'columns' => array (
          'db_id' => 'db_id'
        )
      ),
    ),
    'unique keys' => array (
      'tripal_vocabulary_cvdb' => array (
        'cv_id', 'db_id'
      ),
    ),
    'indexes' => array(
      'tripal_vocabulary_cv_id' => array('cv_id'),
      'tripal_vocabulary_db_id' => array('db_id'),
    )
  );
  return $schema;
}

/**
 * A list of published terms.
 *
 * Usage: This table is used by web services to provide a list of all of the bundles
 *   (i.e. vocabulary terms) that have data in the site.   It is also used by the Entity
 *   administrative pages to allow the site admin to specify which terms should be
 *   publishable (i.e. used as bundles).
 */
function tripal_entities_tripal_term_schema() {

  $schema = array (
    'table' => 'tripal_term',
    'fields' => array (
      'term_id' => array(
        'type' => 'serial',
        'not null' => TRUE
      ),
      'vocabulary_id' => array (
        'type' => 'int',
        'not null' => TRUE
      ),
      'cvterm_id' => array (
        'type' => 'int',
        'not null' => TRUE
      ),
      'publish' => array (
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0
      ),
    ),
    'primary key' => array (
      0 => 'term_id'
    ),
    'foreign keys' => array (
      'cvterm' => array (
        'table' => 'cvterm',
        'columns' => array (
          'cvterm_id' => 'cvterm_id'
        )
      ),
      'tripal_vocabulary' => array (
        'table' => 'tripal_vocabulary',
        'columns' => array (
          'vocabulary_id' => 'vocabulary_id'
        )
      ),
    ),
    'unique keys' => array (
      'tripal_term_unq' => array (
        'vocabulary_id', 'cvterm_id'
      ),
    ),
    'indexes' => array(
      'tripal_term_vocabulary_id' => array('vocabulary_id'),
      'tripal_term_cvterm_id' => array('cvterm_id'),
    ),
  );
  return $schema;
}

/**
 *
 *
 * Specifies the source table in Chado where this entity will pull data.  Because
 * vocabularies can be used in multiple tables there could be many entries here for each
 * vocabulary.
 *
 * Usage: This table is used by web services when querying for all of the records of a
 * given type.  Web services must know where to look for records of a given term.
 */
function tripal_entities_tripal_vocabulary_usage_schema(){

  $schema = array (
    'table' => 'tripal_vocabulary_usage',
    'fields' => array (
      'vocabulary_usage_id' => array(
        'type' => 'serial',
        'not null' => TRUE
      ),
      'vocabulary_id' => array (
        'type' => 'int',
        'not null' => TRUE
      ),
      'data_table' => array (
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE
      ),
      'type_table' => array (
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE
      ),
      'field' => array (
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE
      ),
    ),
    'primary key' => array (
      0 => 'vocabulary_usage_id'
    ),
    'foreign keys' => array (
      'tripal_vocabulary' => array (
        'table' => 'tripal_vocabulary',
        'columns' => array (
          'vocabulary_id' => 'vocabulary_id'
        ),
      ),
    ),
    'unique keys' => array (
      'tripal_vocabulary_ridbase' => array (
        'vocabulary_id', 'data_table'
      ),
    ),
    'indexes' => array(
      'tripal_vocabulary_vocabulary_id' => array('vocabulary_id'),
      'tripal_vocabulary_data_table' => array('data_table'),
      'tripal_vocabulary_type_table' => array('type_table'),
    ),
  );
  return $schema;
}

/**
 *
 *
 * Specifies the source table in Chado where this bundle will pull data.  Because terms
 * can be used in multiple tables there could be many entries here for each term.
 *
 * Note: this table contains the list of tables where a particular cvterm is used,
 * whereas, the tripal_entity_type_source just provides a list of where cvterms from a
 * particular vocabulary might be found.
 */
function tripal_entities_tripal_term_usage_schema() {

  $schema = array (
    'table' => 'tripal_term_usage',
    'fields' => array (
      'term_usage_id' => array(
        'type' => 'serial',
        'not null' => TRUE
      ),
      'term_id' => array (
        'type' => 'int',
        'not null' => TRUE
      ),
      'data_table' => array (
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE
      ),
      'type_table' => array (
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE
      ),
      'field' => array (
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE
      ),
    ),
    'primary key' => array (
      0 => 'term_usage_id'
    ),
    'foreign keys' => array (
      'tripal_term' => array (
        'table' => 'tripal_term',
        'columns' => array (
          'term_id' => 'term_id'
        ),
      ),
    ),
    'unique keys' => array (
      'tripal_term_usage_ridbase' => array (
        'term_id', 'type_table', 'field'
      ),
    ),
    'indexes' => array(
      'tripal_term_usage_term_id' => array('term_id'),
    ),
  );
  return $schema;
}

/**
 *
 *
 * Specifies the predicates used for the semantic web for all properties of a bundle.
 *
 * Usage: When fields are added to an entity then there must be some “relationship” term
 * (i.e. predicate) that indicates the meaning of the relationship.  This predicate must
 * itself be a cvterm from a vocabulary.  For all fields that are automatically added to
 * bundles by tripal there should be a record here.  The site admin should be able to
 * change these if desired, but there should be some sort of default set by Tripal
 * itself.  This will require that all fields for all tables in Chado have some default
 * predicate value.  Also, relationship between two different bundles (whether published
 * or not) should also have a relationship predicate.  See the section in the
 * specification for how default predicates are set.
 */
function tripal_entities_tripal_term_relationship_schema() {

  $schema = array (
    'table' => 'tripal_term_relationship',
    'fields' => array (
      'relationship_id' => array(
        'type' => 'serial',
        'not null' => TRUE
      ),
      'subject_id' => array (
        'type' => 'int',
        'not null' => TRUE
      ),
      'type_id' => array (
        'type' => 'int',
        'not null' => TRUE
      ),
      'object_id' => array (
        'type' => 'int',
        'not null' => FALSE
      ),
      'fieldname' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => FALSE,
      )
    ),
    'primary key' => array (
      0 => 'relationship_id'
    ),
    'foreign keys' => array (
      'tripal_term' => array (
        'table' => 'tripal_term',
        'columns' => array (
          'subject_id' => 'term_id',
          'object_id'  => 'term_id',
        ),
      ),
    ),
    'unique keys' => array (
      'tripal_term_relationship_unq' => array (
        'subject_id', 'type_id', 'object_id'
      ),
    ),
    'indexes' => array(
      'tripal_term_relationship_subject_id' => array('subject_id'),
      'tripal_term_relationship_object_id' => array('object_id'),
      'tripal_term_relationship_type_id' => array('type_id'),
    ),
  );
  return $schema;
}
