<?php

/**
 * @file
 * Contains all the main hook implementations for the tripal_analysis module
 *
 * @defgroup tripal_analysis Analysis Module
 * @ingroup tripal_modules
 * @{
 * Provides functions for managing chado analysis' including creating details pages for each one
 *
 * @}
 *
 *
 */

require_once 'api/tripal_analysis.api.inc';
require_once 'includes/tripal_analysis_privacy.inc';
require_once 'includes/tripal_analysis.admin.inc';
require_once 'includes/tripal_analysis.form.inc';
require_once 'includes/tripal_analysis.sync.inc';
require_once "api/tripal_analysis.schema.api.inc";


/**
 * Add tripal javascript to page headers
 *
 * @ingroup tripal_analysis
 */
function tripal_analysis_init() {
  drupal_add_js(drupal_get_path('module', 'tripal_analysis') . '/theme/js/tripal_analysis.js');
  drupal_add_css(drupal_get_path('module', 'tripal_analysis') . '/theme/css/tripal_analysis.css');
}

/**
 * Provide information to drupal about the node types that we're creating
 * in this module
 *
 * @ingroup tripal_analysis
 */
function tripal_analysis_node_info() {
  $nodes = array();
  $nodes['chado_analysis'] = array(
      'name' => t('Analysis'),
      'base' => 'chado_analysis',
      'description' => t('An analysis'),
      'has_title' => FALSE,
      'title_label' => t('Analysis'),
      'locked' => TRUE
  );
  return $nodes;
}
/**
 * Implementation of hook_menu().
 * Entry points and paths of the module
 *
 * @ingroup tripal_analysis
 */
function tripal_analysis_menu() {

  // Tripal Analysis administrative settings
  $items['admin/tripal/chado/tripal_analysis'] = array(
    'title' => 'Analyses',
    'description' => 'A bioinformatics analysis producing features.',
    'page callback' => 'tripal_analysis_admin_analysis_view',
    'access arguments' => array('administer tripal analyses'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/tripal/chado/tripal_analysis/help'] = array(
    'title' => 'Help',
    'description' => "A description of the Tripal Analysis module including a short description of it's usage.",
    'page callback' => 'theme',
    'page arguments' => array('tripal_analysis_help'),
    'access arguments' => array('administer tripal analyses'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );

  $items['admin/tripal/chado/tripal_analysis/configuration'] = array(
    'title' => 'Settings',
    'description' => 'Settings for the displays of analysis results.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tripal_analysis_admin'),
    'access arguments' => array('administer tripal analyses'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 5
  );

  $items['admin/tripal/chado/tripal_analysis/sync'] = array(
    'title' => 'Sync',
    'description' => 'Sync Chado analyses with Drupal.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tripal_analysis_sync_form'),
    'access arguments' => array('administer tripal analyses'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 0
  );

  return $items;
}

/**
 * Implements hook_help()
 * Purpose: Adds a help page to the module list
 */
function tripal_analysis_help ($path, $arg) {
  if ($path == 'admin/help#tripal_analysis') {
    return theme('tripal_analysis_help', array());
  }
}

/**
 *  Set the permission types that the chado module uses.  Essentially we
 *  want permissionis that protect creation, editing and deleting of chado
 *  data objects
 *
 * @ingroup tripal_analysis
 */
function tripal_analysis_permission() {
  return array(
    'access chado_analysis content' => array(
      'title' => t('View Analyses'),
      'description' => t('Allow users to view analysis pages.'),
    ),
    'create chado_analysis content' => array(
      'title' => t('Create Analyses'),
      'description' => t('Allow users to create new analysis pages.'),
    ),
    'delete chado_analysis content' => array(
      'title' => t('Delete Analyses'),
      'description' => t('Allow users to delete analysis pages.'),
    ),
    'edit chado_analysis content' => array(
      'title' => t('Edit Analyses'),
      'description' => t('Allow users to edit analysis pages.'),
    ),
    'adminster tripal analysis' => array(
      'title' => t('Administer Analyses'),
      'description' => t('Allow users to administer all analyses.'),
    ),
  );
}

/**
 *  We need to let drupal know about our theme functions and their arguments.
 *  We create theme functions to allow users of the module to customize the
 *  look and feel of the output generated in this module
 *
 * @ingroup tripal_analysis
 */
function tripal_analysis_theme($existing, $type, $theme, $path) {
  $core_path = drupal_get_path('module', 'tripal_core');

  $items = array(
    'node__chado_analysis' => array(
      'template' => 'node--chado-generic',
      'render element' => 'node',
      'base hook' => 'node',
      'path' => "$core_path/theme",
    ),
    'tripal_analysis_base' => array(
      'variables' => array('node' => NULL),
      'template' => 'tripal_analysis_base',
      'path' => "$path/theme/tripal_analysis",
    ),
    'tripal_analysis_properties' => array(
      'variables' => array('node' => NULL),
      'template' => 'tripal_analysis_properties',
      'path' => "$path/theme/tripal_analysis",
    ),
    'tripal_analysis_teaser' => array(
      'variables' => array('node' => NULL),
      'template' => 'tripal_analysis_teaser',
      'path' => "$path/theme/tripal_analysis",
    ),
    'tripal_analysis_help' => array(
      'template' => 'tripal_analysis_help',
      'variables' =>  array(NULL),
      'path' => "$path/theme",
    ),
    
    // tripal_feature theme
    'tripal_feature_analyses' => array(
      'template' => 'tripal_feature_analyses',
      'variables' =>  array('node' => NULL),
      'path' => "$path/theme/tripal_analysis",
    ),

  );

  return $items;
}
/**
 *
 *
 * @ingroup tripal_analysis
 */
function tripal_analysis_block_info() {
  $blocks['base']['info'] = t('Tripal Analysis Details');
  $blocks['base']['cache'] = DRUPAL_NO_CACHE;

  $blocks['featureblast']['info'] = t('Tripal Feature Analyses');
  $blocks['featureblast']['cache'] = DRUPAL_NO_CACHE;

  return $blocks;
}

/**
 *
 *
 * @ingroup tripal_analysis
 */
function tripal_analysis_block_view($delta = '') {

  if (user_access('access chado_analysis content') and arg(0) == 'node' and is_numeric(arg(1))) {
    $nid = arg(1);
    $node = node_load($nid);

    $block = array();
    switch ($delta) {
      case 'base':
        $block['subject'] = t('Analysis Details');
        $block['content'] = theme('tripal_analysis_base', $node);
        break;
      case 'tripal_feature_analyses':
        $block['subject'] = t('Feature Analyses');
        $block['content'] = theme('tripal_feature_analyses', $node);
        break;
      default :
    }
    return $block;
  }
}

/**
 *
 * @ingroup tripal_feature
 */
function tripal_analysis_node_view($node, $view_mode, $langcode) {
  switch ($node->type) {
    case 'chado_analysis':
      // Show feature browser and counts
      if ($view_mode == 'full') {
        $node->content['tripal_analysis_base'] = array(
          '#value' => theme('tripal_analysis_base', array('node' => $node)),
        );
        $node->content['tripal_analysis_properties'] = array(
          '#value' => theme('tripal_analysis_properties', array('node' => $node)),
        );
      }
      if ($view_mode == 'teaser') {
        $node->content['tripal_analysis_teaser'] = array(
          '#value' => theme('tripal_analysis_teaser', array('node' => $node)),
        );
      }
      break;
  }
}
/**
 * 
 * @param $node
 */
function tripal_analysis_node_presave($node) {
  // If this is an analysis of some type it will should have thre three required
  // fields for the Chado analysis table: program, programversion and sourcename.
  // So we will set the title for any node that has these three fields
  if (property_exists($node, 'program') and 
      property_exists($node, 'programversion') and
      property_exists($node, 'sourcename')) {
    if ($node->analysisname) {
      $node->title = $node->analysisname;
    }
    else {
      $node->title = "$node->program ($node->programversion) $node->sourcename";
    }
  }
}
/**
 * Implements hook_views_api()
 * Purpose: Essentially this hook tells drupal that there is views support for
 *  for this module which then includes tripal_analysis.views.inc where all the
 *  views integration code is
 *
 * @ingroup tripal_analysis
 */
function tripal_analysis_views_api() {
  return array(
    'api' => 2.0,
  );
}




/**
 * Implementation of hook_form_alter()
 * 
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function tripal_analysis_form_alter(&$form, &$form_state, $form_id) {
  // turn of preview button for insert/updates
  if ($form_id == "chado_analysis_node_form") {
    $form['actions']['preview']['#access'] = FALSE;
  }
}
/**
 *  When a new chado_analysis node is created we also need to add information
 *  to our chado_analysis table.  This function is called on insert of a new
 *  node of type 'chado_analysis' and inserts the necessary information.
 *
 * @ingroup tripal_analysis
 */
function chado_analysis_insert($node) {

  $node->analysisname = trim($node->analysisname);
  $node->description = trim($node->description);
  $node->program = trim($node->program);
  $node->programversion = trim($node->programversion);
  $node->algorithm = trim($node->algorithm);
  $node->sourcename = trim($node->sourcename);
  $node->sourceversion = trim($node->sourceversion);
  $node->sourceuri = trim($node->sourceuri);

  // if there is an analysis_id in the $node object then this must be a sync so
  // we can skip adding the analysis as it is already there, although
  // we do need to proceed with the rest of the insert
  if (!property_exists($node, 'analysis_id')) {

    // Create a timestamp so we can insert it into the chado database
    $time  = $node->timeexecuted;
    $month = $time['month'];
    $day   = $time['day'];
    $year  = $time['year'];
    $timestamp = $month . '/' . $day . '/' . $year;

    // insert and then get the newly inserted analysis record
    $values = array(
      'name'           => $node->analysisname,
      'description'    => $node->description,
      'program'        => $node->program,
      'programversion' => $node->programversion,
      'algorithm'      => $node->algorithm,
      'sourcename'     => $node->sourcename,
      'sourceversion'  => $node->sourceversion,
      'sourceuri'      => $node->sourceuri,
      'timeexecuted'   => $timestamp
    );
    $analysis = tripal_core_chado_insert('analysis', $values);
    if (!$analysis) {
      drupal_set_message(t('Unable to add analysis.', 'warning'));
      watchdog('tripal_analysis', 'Insert analysis: Unable to create analysis where values:%values',
      array('%values' => print_r($values, TRUE)), WATCHDOG_ERROR);
      return;
    }
    $analysis_id = $analysis['analysis_id'];
    
    // now add in the properties
    $properties = tripal_core_properties_form_retreive($node, 'analysis_property');
    foreach ($properties as $property => $elements) {
      foreach ($elements as $rank => $value) {
    
        $status = tripal_analysis_insert_property($analysis_id, $property, $value, FALSE, 'analysis_property');
        if (!$status) {
          drupal_set_message("Error cannot add property: $property", "error");
          watchdog('t_analysis', "Error cannot add property: %prop",
          array('%property' => $property), WATCHDOG_ERROR);
        }
      }
    }
  }
  else {
    $analysis_id = $node->analysis_id;
  }

  // Make sure the entry for this analysis doesn't already exist in the
  // chado_analysis table if it doesn't exist then we want to add it.
  $check_org_id = chado_get_id_for_node('analysis', $node->nid);
  if (!$check_org_id) {
    $record = new stdClass();
    $record->nid = $node->nid;
    $record->vid = $node->vid;
    $record->analysis_id = $analysis_id;
    drupal_write_record('chado_analysis', $record);
  }

  // add the analysis to the node object for
  // use by other analysis modules that may be using this function
  $node->analysis = $analysis;
  $node->analysis_id = $analysis_id; // we need to set this for children
}

/**
 * Removes analysis from the chado database
 *
 * @param $node
 *   The node object specifying which chado record to delete
 *
 * @ingroup tripal_analysis
 */
function chado_analysis_delete($node) {
  $analysis_id = chado_get_id_for_node('analysis', $node->nid);

  // if we don't have an analysis id for this node then this isn't a node of
  // type chado_analysis or the entry in the chado_analysis table was lost.
  if (!$analysis_id) {
    return;
  }

  // Remove data from the {chado_analysis}, {node}, and {node_revisions} tables
  $sql_del = "DELETE FROM {chado_analysis} WHERE nid = :nid AND vid = :vid";
  db_query($sql_del, array(':nid' => $node->nid, ':vid' => $node->vid));
  $sql_del = "DELETE FROM {node} WHERE nid = :nid AND vid = :vid";
  db_query($sql_del, array(':nid' => $node->nid, ':vid' => $node->vid));
  $sql_del = "DELETE FROM {node_revision} WHERE nid = :nid AND vid = :vid";
  db_query($sql_del, array(':nid' => $node->nid, ':vid' => $node->vid));

  //Remove from analysis and analysisprop tables of chado database as well
  chado_query("DELETE FROM {analysis} WHERE analysis_id = :analysis_id", array(':analysis_id' => $analysis_id));
}

/**
 * Update analyses
 *
 * @param $node
 *   The updated node object
 *
 * @ingroup tripal_analysis
 */
function chado_analysis_update($node) {
  $node->analysisname = trim($node->analysisname);
  $node->description = trim($node->description);
  $node->program = trim($node->program);
  $node->programversion = trim($node->programversion);
  $node->algorithm = trim($node->algorithm);
  $node->sourcename = trim($node->sourcename);
  $node->sourceversion = trim($node->sourceversion);
  $node->sourceuri = trim($node->sourceuri);

  // Create a timestamp so we can insert it into the chado database
  $time = $node->timeexecuted;
  $month = $time['month'];
  $day = $time['day'];
  $year = $time['year'];
  $timestamp = $month . '/' . $day . '/' . $year;

  // update the record in Chado
  $analysis_id = chado_get_id_for_node('analysis', $node->nid);
  $sql = "
    UPDATE {analysis}
    SET name = :name, description = :description, program = :program,
        programversion = :programversion, algorithm = :algorithm, sourcename = :sourcename,
        sourceversion = :sourceversion, sourceuri = :sourceuri, timeexecuted = :timeexecuted
    WHERE analysis_id = :analysis_id
  ";
  $args = array(
    ':name' => $node->analysisname,
    ':description' => $node->description,
    ':program' => $node->program,
    ':programversion' => $node->programversion,
    ':algorithm' => $node->algorithm,
    ':sourcename' => $node->sourcename,
    ':sourceversion' => $node->sourceversion,
    ':sourceuri' => $node->sourceuri,
    ':timeexecuted' => $timestamp,
    ':analysis_id' => $analysis_id
  );
  chado_query($sql, $args);

  // now update the properties
  $properties = array(); // stores all of the properties we need to add
  
  // now add in the properties by first removing any the analysis
  // already has and adding the ones we have
  tripal_core_chado_delete('analysisprop', array('analysis_id' => $analysis_id));
  $properties = tripal_core_properties_form_retreive($node, 'analysis_property');
  foreach ($properties as $property => $elements) {
    foreach ($elements as $rank => $value) {
      $status = tripal_analysis_insert_property($analysis_id, $property, $value, FALSE, 'analysis_property');
      if (!$status) {
        drupal_set_message("Error cannot add property: '$property'", "error");
        watchdog('t_analysis', "Error cannot add property: '%prop'",
        array('%prop' => $property), WATCHDOG_ERROR);
      }
    }
  }
}
 /**
  *  When a node is requested by the user this function is called to allow us
  *  to add auxiliary data to the node object.
  *
  * @ingroup tripal_analysis
  */
function chado_analysis_load($nodes) {

  foreach ($nodes as $nid => $node) {
    // find the analysis and add in the details
    $analysis_id = chado_get_id_for_node('analysis', $nid);

    // build the analysis variable
    $values = array('analysis_id' => $analysis_id);
    $analysis = tripal_core_generate_chado_var('analysis', $values);
    
    // add in the description field
    $analysis = tripal_core_expand_chado_vars($analysis, 'field', 'analysis.description');
    $nodes[$nid]->analysis = $analysis;
  }
}

/**
 * Implement hook_access().
 *
 * This hook allows node modules to limit access to the node types they define.
 *
 *  @param $node
 *  The node on which the operation is to be performed, or, if it does not yet exist, the
 *  type of node to be created
 *
 *  @param $op
 *  The operation to be performed
 *
 *  @param $account
 *  A user object representing the user for whom the operation is to be performed
 *
 *  @return
 *  If the permission for the specified operation is not set then return FALSE. If the
 *  permission is set then return NULL as this allows other modules to disable
 *  access.  The only exception is when the $op == 'create'.  We will always
 *  return TRUE if the permission is set.
 *
 * @ingroup tripal_analysis
 */
function chado_analysis_node_access($node, $op, $account) {

  if ($op == 'create') {
    if (!user_access('create chado_analysis content', $account)) {
      return FALSE;
    }
    return TRUE;
  }
  if ($op == 'update') {
    if (!user_access('edit chado_analysis content', $account)) {
      return FALSE;
    }
  }
  if ($op == 'delete') {
    if (!user_access('delete chado_analysis content', $account)) {
      return FALSE;
    }
  }
  if ($op == 'view') {
    if (!user_access('access chado_analysis content', $account)) {
      return FALSE;
    }
  }
  return NULL;
}

